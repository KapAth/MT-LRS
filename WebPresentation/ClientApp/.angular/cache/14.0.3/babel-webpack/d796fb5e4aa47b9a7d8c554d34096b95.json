{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/akaps/Documents/Visual Studio 2022/Projects/MT_LRS/WebPresentation/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.0.7\n */\nimport { getAssetPath } from '@stencil/core/internal/client/index.js';\nimport { g as getSupportedLocale } from './locale.js';\nconst componentLangToMessageBundleCache = {};\n\nfunction getMessageBundle(_x, _x2) {\n  return _getMessageBundle.apply(this, arguments);\n}\n\nfunction _getMessageBundle() {\n  _getMessageBundle = _asyncToGenerator(function* (lang, component) {\n    const key = `${component}_${lang}`;\n\n    if (componentLangToMessageBundleCache[key]) {\n      return componentLangToMessageBundleCache[key];\n    }\n\n    componentLangToMessageBundleCache[key] = fetch(getAssetPath(`./assets/${component}/t9n/messages_${lang}.json`)).then(resp => {\n      if (!resp.ok) {\n        throwMessageFetchError();\n      }\n\n      return resp.json();\n    }).catch(() => throwMessageFetchError());\n    return componentLangToMessageBundleCache[key];\n  });\n  return _getMessageBundle.apply(this, arguments);\n}\n\nfunction throwMessageFetchError() {\n  throw new Error(\"could not fetch component message bundle\");\n}\n\nfunction mergeMessages(component) {\n  component.messages = { ...component.defaultMessages,\n    ...component.messageOverrides\n  };\n}\n/**\n * This utility sets up the messages used by the component. It should be awaited in the `componentWillLoad` lifecycle hook.\n *\n * @param component\n */\n\n\nfunction setUpMessages(_x3) {\n  return _setUpMessages.apply(this, arguments);\n}\n\nfunction _setUpMessages() {\n  _setUpMessages = _asyncToGenerator(function* (component) {\n    component.defaultMessages = yield fetchMessages(component, component.effectiveLocale);\n    mergeMessages(component);\n  });\n  return _setUpMessages.apply(this, arguments);\n}\n\nfunction fetchMessages(_x4, _x5) {\n  return _fetchMessages.apply(this, arguments);\n}\n/**\n * This utility must be set up for the component to update its default message bundle if the locale changes.\n *\n * It can be set up in **either** of the following ways:\n *\n * 1. called from `LocalizedComponent`'s `onLocaleChange` method or\n * 2. called from a watcher configured to watch `LocalizedComponent`'s `effectiveLocale` prop\n *\n * @param component\n * @param lang\n */\n\n\nfunction _fetchMessages() {\n  _fetchMessages = _asyncToGenerator(function* (component, lang) {\n    const {\n      el\n    } = component;\n    const tag = el.tagName.toLowerCase();\n    const componentName = tag.replace(\"calcite-\", \"\");\n    return getMessageBundle(getSupportedLocale(lang, \"t9n\"), componentName);\n  });\n  return _fetchMessages.apply(this, arguments);\n}\n\nfunction updateMessages(_x6, _x7) {\n  return _updateMessages.apply(this, arguments);\n}\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback`\n *\n * **Note**: this must be called after `LocalizedComponent`'s `connectLocalized` method.\n *\n * @param component\n */\n\n\nfunction _updateMessages() {\n  _updateMessages = _asyncToGenerator(function* (component, lang) {\n    component.defaultMessages = yield fetchMessages(component, lang);\n    mergeMessages(component);\n  });\n  return _updateMessages.apply(this, arguments);\n}\n\nfunction connectMessages(component) {\n  component.onMessagesChange = defaultOnMessagesChange;\n}\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\n\n\nfunction disconnectMessages(component) {\n  component.onMessagesChange = undefined;\n}\n\nfunction defaultOnMessagesChange() {\n  mergeMessages(this);\n}\n\nexport { connectMessages as c, disconnectMessages as d, setUpMessages as s, updateMessages as u };","map":{"version":3,"names":["getAssetPath","g","getSupportedLocale","componentLangToMessageBundleCache","getMessageBundle","lang","component","key","fetch","then","resp","ok","throwMessageFetchError","json","catch","Error","mergeMessages","messages","defaultMessages","messageOverrides","setUpMessages","fetchMessages","effectiveLocale","el","tag","tagName","toLowerCase","componentName","replace","updateMessages","connectMessages","onMessagesChange","defaultOnMessagesChange","disconnectMessages","undefined","c","d","s","u"],"sources":["C:/Users/akaps/Documents/Visual Studio 2022/Projects/MT_LRS/WebPresentation/node_modules/@esri/calcite-components/dist/components/t9n.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.0.7\n */\nimport { getAssetPath } from '@stencil/core/internal/client/index.js';\nimport { g as getSupportedLocale } from './locale.js';\n\nconst componentLangToMessageBundleCache = {};\nasync function getMessageBundle(lang, component) {\n  const key = `${component}_${lang}`;\n  if (componentLangToMessageBundleCache[key]) {\n    return componentLangToMessageBundleCache[key];\n  }\n  componentLangToMessageBundleCache[key] = fetch(getAssetPath(`./assets/${component}/t9n/messages_${lang}.json`))\n    .then((resp) => {\n    if (!resp.ok) {\n      throwMessageFetchError();\n    }\n    return resp.json();\n  })\n    .catch(() => throwMessageFetchError());\n  return componentLangToMessageBundleCache[key];\n}\nfunction throwMessageFetchError() {\n  throw new Error(\"could not fetch component message bundle\");\n}\nfunction mergeMessages(component) {\n  component.messages = {\n    ...component.defaultMessages,\n    ...component.messageOverrides\n  };\n}\n/**\n * This utility sets up the messages used by the component. It should be awaited in the `componentWillLoad` lifecycle hook.\n *\n * @param component\n */\nasync function setUpMessages(component) {\n  component.defaultMessages = await fetchMessages(component, component.effectiveLocale);\n  mergeMessages(component);\n}\nasync function fetchMessages(component, lang) {\n  const { el } = component;\n  const tag = el.tagName.toLowerCase();\n  const componentName = tag.replace(\"calcite-\", \"\");\n  return getMessageBundle(getSupportedLocale(lang, \"t9n\"), componentName);\n}\n/**\n * This utility must be set up for the component to update its default message bundle if the locale changes.\n *\n * It can be set up in **either** of the following ways:\n *\n * 1. called from `LocalizedComponent`'s `onLocaleChange` method or\n * 2. called from a watcher configured to watch `LocalizedComponent`'s `effectiveLocale` prop\n *\n * @param component\n * @param lang\n */\nasync function updateMessages(component, lang) {\n  component.defaultMessages = await fetchMessages(component, lang);\n  mergeMessages(component);\n}\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback`\n *\n * **Note**: this must be called after `LocalizedComponent`'s `connectLocalized` method.\n *\n * @param component\n */\nfunction connectMessages(component) {\n  component.onMessagesChange = defaultOnMessagesChange;\n}\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nfunction disconnectMessages(component) {\n  component.onMessagesChange = undefined;\n}\nfunction defaultOnMessagesChange() {\n  mergeMessages(this);\n}\n\nexport { connectMessages as c, disconnectMessages as d, setUpMessages as s, updateMessages as u };\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,wCAA7B;AACA,SAASC,CAAC,IAAIC,kBAAd,QAAwC,aAAxC;AAEA,MAAMC,iCAAiC,GAAG,EAA1C;;SACeC,gB;;;;;wCAAf,WAAgCC,IAAhC,EAAsCC,SAAtC,EAAiD;IAC/C,MAAMC,GAAG,GAAI,GAAED,SAAU,IAAGD,IAAK,EAAjC;;IACA,IAAIF,iCAAiC,CAACI,GAAD,CAArC,EAA4C;MAC1C,OAAOJ,iCAAiC,CAACI,GAAD,CAAxC;IACD;;IACDJ,iCAAiC,CAACI,GAAD,CAAjC,GAAyCC,KAAK,CAACR,YAAY,CAAE,YAAWM,SAAU,iBAAgBD,IAAK,OAA5C,CAAb,CAAL,CACtCI,IADsC,CAChCC,IAAD,IAAU;MAChB,IAAI,CAACA,IAAI,CAACC,EAAV,EAAc;QACZC,sBAAsB;MACvB;;MACD,OAAOF,IAAI,CAACG,IAAL,EAAP;IACD,CANwC,EAOtCC,KAPsC,CAOhC,MAAMF,sBAAsB,EAPI,CAAzC;IAQA,OAAOT,iCAAiC,CAACI,GAAD,CAAxC;EACD,C;;;;AACD,SAASK,sBAAT,GAAkC;EAChC,MAAM,IAAIG,KAAJ,CAAU,0CAAV,CAAN;AACD;;AACD,SAASC,aAAT,CAAuBV,SAAvB,EAAkC;EAChCA,SAAS,CAACW,QAAV,GAAqB,EACnB,GAAGX,SAAS,CAACY,eADM;IAEnB,GAAGZ,SAAS,CAACa;EAFM,CAArB;AAID;AACD;AACA;AACA;AACA;AACA;;;SACeC,a;;;;;qCAAf,WAA6Bd,SAA7B,EAAwC;IACtCA,SAAS,CAACY,eAAV,SAAkCG,aAAa,CAACf,SAAD,EAAYA,SAAS,CAACgB,eAAtB,CAA/C;IACAN,aAAa,CAACV,SAAD,CAAb;EACD,C;;;;SACce,a;;;AAMf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;qCAhBA,WAA6Bf,SAA7B,EAAwCD,IAAxC,EAA8C;IAC5C,MAAM;MAAEkB;IAAF,IAASjB,SAAf;IACA,MAAMkB,GAAG,GAAGD,EAAE,CAACE,OAAH,CAAWC,WAAX,EAAZ;IACA,MAAMC,aAAa,GAAGH,GAAG,CAACI,OAAJ,CAAY,UAAZ,EAAwB,EAAxB,CAAtB;IACA,OAAOxB,gBAAgB,CAACF,kBAAkB,CAACG,IAAD,EAAO,KAAP,CAAnB,EAAkCsB,aAAlC,CAAvB;EACD,C;;;;SAYcE,c;;;AAIf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;sCAZA,WAA8BvB,SAA9B,EAAyCD,IAAzC,EAA+C;IAC7CC,SAAS,CAACY,eAAV,SAAkCG,aAAa,CAACf,SAAD,EAAYD,IAAZ,CAA/C;IACAW,aAAa,CAACV,SAAD,CAAb;EACD,C;;;;AAUD,SAASwB,eAAT,CAAyBxB,SAAzB,EAAoC;EAClCA,SAAS,CAACyB,gBAAV,GAA6BC,uBAA7B;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,kBAAT,CAA4B3B,SAA5B,EAAuC;EACrCA,SAAS,CAACyB,gBAAV,GAA6BG,SAA7B;AACD;;AACD,SAASF,uBAAT,GAAmC;EACjChB,aAAa,CAAC,IAAD,CAAb;AACD;;AAED,SAASc,eAAe,IAAIK,CAA5B,EAA+BF,kBAAkB,IAAIG,CAArD,EAAwDhB,aAAa,IAAIiB,CAAzE,EAA4ER,cAAc,IAAIS,CAA9F"},"metadata":{},"sourceType":"module"}