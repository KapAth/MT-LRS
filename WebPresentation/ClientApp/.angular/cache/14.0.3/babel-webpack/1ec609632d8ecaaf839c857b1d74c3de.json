{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport { _ as t } from \"../../chunks/tslib.es6.js\";\nimport e from \"../../core/Error.js\";\nimport { JSONSupport as s } from \"../../core/JSONSupport.js\";\nimport { clone as i } from \"../../core/lang.js\";\nimport l from \"../../core/Logger.js\";\nimport { isSome as r, isNone as o } from \"../../core/maybe.js\";\nimport { property as a } from \"../../core/accessorSupport/decorators/property.js\";\nimport { cast as h } from \"../../core/accessorSupport/decorators/cast.js\";\nimport { subclass as n } from \"../../core/accessorSupport/decorators/subclass.js\";\nimport { SimpleBandStatistics as p } from \"./SimpleBandStatistics.js\";\nimport { getPixelValueRange as c } from \"./rasterFormats/pixelRangeUtils.js\";\nvar u;\nlet g = u = class extends s {\n  static createEmptyBand(t, e) {\n    return new (u.getPixelArrayConstructor(t))(e);\n  }\n\n  static getPixelArrayConstructor(t) {\n    let e;\n\n    switch (t) {\n      case \"u1\":\n      case \"u2\":\n      case \"u4\":\n      case \"u8\":\n        e = Uint8Array;\n        break;\n\n      case \"u16\":\n        e = Uint16Array;\n        break;\n\n      case \"u32\":\n        e = Uint32Array;\n        break;\n\n      case \"s8\":\n        e = Int8Array;\n        break;\n\n      case \"s16\":\n        e = Int16Array;\n        break;\n\n      case \"s32\":\n        e = Int32Array;\n        break;\n\n      case \"f32\":\n      case \"c64\":\n      case \"c128\":\n      case \"unknown\":\n        e = Float32Array;\n        break;\n\n      case \"f64\":\n        e = Float64Array;\n    }\n\n    return e;\n  }\n\n  constructor(t) {\n    super(t), this.width = null, this.height = null, this.pixelType = \"f32\", this.validPixelCount = null, this.mask = null, this.maskIsAlpha = !1, this.premultiplyAlpha = !1, this.statistics = null, this.depthCount = 1;\n  }\n\n  castPixelType(t) {\n    if (!t) return \"f32\";\n    let e = t.toLowerCase();\n    return [\"u1\", \"u2\", \"u4\"].includes(e) ? e = \"u8\" : [\"unknown\", \"u8\", \"s8\", \"u16\", \"s16\", \"u32\", \"s32\", \"f32\", \"f64\"].includes(e) || (e = \"f32\"), e;\n  }\n\n  getPlaneCount() {\n    return this.pixels?.length;\n  }\n\n  addData(t) {\n    if (!t.pixels || t.pixels.length !== this.width * this.height) throw new e(\"pixelblock:invalid-or-missing-pixels\", \"add data requires valid pixels array that has same length defined by pixel block width * height\");\n    this.pixels || (this.pixels = []), this.statistics || (this.statistics = []), this.pixels.push(t.pixels), this.statistics.push(t.statistics ?? new p());\n  }\n\n  getAsRGBA() {\n    const t = new ArrayBuffer(this.width * this.height * 4);\n\n    switch (this.pixelType) {\n      case \"s8\":\n      case \"s16\":\n      case \"u16\":\n      case \"s32\":\n      case \"u32\":\n      case \"f32\":\n      case \"f64\":\n        this._fillFromNon8Bit(t);\n\n        break;\n\n      default:\n        this._fillFrom8Bit(t);\n\n    }\n\n    return new Uint8ClampedArray(t);\n  }\n\n  getAsRGBAFloat() {\n    const t = new Float32Array(this.width * this.height * 4);\n    return this._fillFrom32Bit(t), t;\n  }\n\n  updateStatistics() {\n    if (!this.pixels) return;\n    this.statistics = this.pixels.map(t => this._calculateBandStatistics(t, this.mask));\n    const t = this.mask;\n    let e = 0;\n    if (r(t)) for (let s = 0; s < t.length; s++) t[s] && e++;else e = this.width * this.height;\n    this.validPixelCount = e;\n  }\n\n  clamp(t) {\n    if (!t || \"f64\" === t || \"f32\" === t || !this.pixels) return;\n    const [e, s] = c(t),\n          i = this.pixels,\n          l = this.width * this.height,\n          r = i.length;\n    let o, a, h;\n    const n = [];\n\n    for (let p = 0; p < r; p++) {\n      h = u.createEmptyBand(t, l), o = i[p];\n\n      for (let t = 0; t < l; t++) a = o[t], h[t] = a > s ? s : a < e ? e : a;\n\n      n.push(h);\n    }\n\n    this.pixels = n, this.pixelType = t;\n  }\n\n  extractBands(t) {\n    const {\n      pixels: e,\n      statistics: s\n    } = this;\n    if (o(t) || 0 === t.length || !e || 0 === e.length) return this;\n    const i = e.length,\n          l = t.some(t => t >= e.length),\n          r = i === t.length && !t.some((t, e) => t !== e);\n    return l || r ? this : new u({\n      pixelType: this.pixelType,\n      width: this.width,\n      height: this.height,\n      mask: this.mask,\n      validPixelCount: this.validPixelCount,\n      maskIsAlpha: this.maskIsAlpha,\n      pixels: t.map(t => e[t]),\n      statistics: s && t.map(t => s[t])\n    });\n  }\n\n  clone() {\n    const t = new u({\n      width: this.width,\n      height: this.height,\n      pixelType: this.pixelType,\n      maskIsAlpha: this.maskIsAlpha,\n      validPixelCount: this.validPixelCount\n    });\n    let e;\n    r(this.mask) && (this.mask instanceof Uint8Array ? t.mask = new Uint8Array(this.mask) : t.mask = this.mask.slice(0));\n    const s = u.getPixelArrayConstructor(this.pixelType);\n\n    if (this.pixels && this.pixels.length > 0) {\n      t.pixels = [];\n      const i = !!this.pixels[0].slice;\n\n      for (e = 0; e < this.pixels.length; e++) t.pixels[e] = i ? this.pixels[e].slice(0, this.pixels[e].length) : new s(this.pixels[e]);\n    }\n\n    if (this.statistics) for (t.statistics = [], e = 0; e < this.statistics.length; e++) t.statistics[e] = i(this.statistics[e]);\n    return t.premultiplyAlpha = this.premultiplyAlpha, t;\n  }\n\n  _fillFrom8Bit(t) {\n    const {\n      mask: e,\n      maskIsAlpha: s,\n      premultiplyAlpha: i,\n      pixels: o\n    } = this;\n    if (!t || !o || !o.length) return void l.getLogger(this.declaredClass).error(\"getAsRGBA()\", \"Unable to convert to RGBA. The input pixel block is empty.\");\n    let a, h, n, p;\n    a = h = n = o[0], o.length >= 3 ? (h = o[1], n = o[2]) : 2 === o.length && (h = o[1]);\n    const c = new Uint32Array(t),\n          u = this.width * this.height;\n    if (a.length === u) {\n      if (r(e) && e.length === u) {\n        if (s) for (p = 0; p < u; p++) {\n          const t = e[p];\n\n          if (t) {\n            const e = t / 255;\n            c[p] = i ? t << 24 | n[p] * e << 16 | h[p] * e << 8 | a[p] * e : t << 24 | n[p] << 16 | h[p] << 8 | a[p];\n          }\n        } else for (p = 0; p < u; p++) e[p] && (c[p] = 255 << 24 | n[p] << 16 | h[p] << 8 | a[p]);\n      } else for (p = 0; p < u; p++) c[p] = 255 << 24 | n[p] << 16 | h[p] << 8 | a[p];\n    } else l.getLogger(this.declaredClass).error(\"getAsRGBA()\", \"Unable to convert to RGBA. The pixelblock is invalid.\");\n  }\n\n  _fillFromNon8Bit(t) {\n    const {\n      pixels: e,\n      mask: s,\n      statistics: i\n    } = this;\n    if (!t || !e || !e.length) return void l.getLogger(this.declaredClass).error(\"getAsRGBA()\", \"Unable to convert to RGBA. The input pixel block is empty.\");\n    const o = this.pixelType;\n    let a = 1,\n        h = 0,\n        n = 1;\n\n    if (i && i.length > 0) {\n      for (const t of i) if (null != t.minValue && (h = Math.min(h, t.minValue)), null != t.maxValue && null != t.minValue) {\n        const e = t.maxValue - t.minValue;\n        n = Math.max(n, e);\n      }\n\n      a = 255 / n;\n    } else {\n      let t = 255;\n      \"s8\" === o ? (h = -128, t = 127) : \"u16\" === o ? t = 65535 : \"s16\" === o ? (h = -32768, t = 32767) : \"u32\" === o ? t = 4294967295 : \"s32\" === o ? (h = -2147483648, t = 2147483647) : \"f32\" === o ? (h = -34e38, t = 34e38) : \"f64\" === o && (h = -Number.MAX_VALUE, t = Number.MAX_VALUE), a = 255 / (t - h);\n    }\n\n    const p = new Uint32Array(t),\n          c = this.width * this.height;\n    let u, g, m, d, f;\n    if (u = g = m = e[0], u.length !== c) return l.getLogger(this.declaredClass).error(\"getAsRGBA()\", \"Unable to convert to RGBA. The pixelblock is invalid.\");\n    if (e.length >= 2) {\n      if (g = e[1], e.length >= 3 && (m = e[2]), r(s) && s.length === c) for (d = 0; d < c; d++) s[d] && (p[d] = 255 << 24 | (m[d] - h) * a << 16 | (g[d] - h) * a << 8 | (u[d] - h) * a);else for (d = 0; d < c; d++) p[d] = 255 << 24 | (m[d] - h) * a << 16 | (g[d] - h) * a << 8 | (u[d] - h) * a;\n    } else if (r(s) && s.length === c) for (d = 0; d < c; d++) f = (u[d] - h) * a, s[d] && (p[d] = 255 << 24 | f << 16 | f << 8 | f);else for (d = 0; d < c; d++) f = (u[d] - h) * a, p[d] = 255 << 24 | f << 16 | f << 8 | f;\n  }\n\n  _fillFrom32Bit(t) {\n    const {\n      pixels: e,\n      mask: s\n    } = this;\n    if (!t || !e || !e.length) return l.getLogger(this.declaredClass).error(\"getAsRGBAFloat()\", \"Unable to convert to RGBA. The input pixel block is empty.\");\n    let i, o, a, h;\n    i = o = a = e[0], e.length >= 3 ? (o = e[1], a = e[2]) : 2 === e.length && (o = e[1]);\n    const n = this.width * this.height;\n    if (i.length !== n) return l.getLogger(this.declaredClass).error(\"getAsRGBAFloat()\", \"Unable to convert to RGBA. The pixelblock is invalid.\");\n    let p = 0;\n    if (r(s) && s.length === n) for (h = 0; h < n; h++) t[p++] = i[h], t[p++] = o[h], t[p++] = a[h], t[p++] = 1 & s[h];else for (h = 0; h < n; h++) t[p++] = i[h], t[p++] = o[h], t[p++] = a[h], t[p++] = 1;\n  }\n\n  _calculateBandStatistics(t, e) {\n    let s = 1 / 0,\n        i = -1 / 0;\n    const l = t.length;\n    let o,\n        a = 0;\n    if (r(e)) for (o = 0; o < l; o++) e[o] && (a = t[o], s = a < s ? a : s, i = a > i ? a : i);else for (o = 0; o < l; o++) a = t[o], s = a < s ? a : s, i = a > i ? a : i;\n    return new p(s, i);\n  }\n\n};\nt([a({\n  json: {\n    write: !0\n  }\n})], g.prototype, \"width\", void 0), t([a({\n  json: {\n    write: !0\n  }\n})], g.prototype, \"height\", void 0), t([a({\n  json: {\n    write: !0\n  }\n})], g.prototype, \"pixelType\", void 0), t([h(\"pixelType\")], g.prototype, \"castPixelType\", null), t([a({\n  json: {\n    write: !0\n  }\n})], g.prototype, \"validPixelCount\", void 0), t([a({\n  json: {\n    write: !0\n  }\n})], g.prototype, \"mask\", void 0), t([a({\n  json: {\n    write: !0\n  }\n})], g.prototype, \"maskIsAlpha\", void 0), t([a({\n  json: {\n    write: !0\n  }\n})], g.prototype, \"pixels\", void 0), t([a()], g.prototype, \"premultiplyAlpha\", void 0), t([a({\n  json: {\n    write: !0\n  }\n})], g.prototype, \"statistics\", void 0), t([a({\n  json: {\n    write: !0\n  }\n})], g.prototype, \"depthCount\", void 0), t([a({\n  json: {\n    write: !0\n  }\n})], g.prototype, \"noDataValues\", void 0), t([a({\n  json: {\n    write: !0\n  }\n})], g.prototype, \"bandMasks\", void 0), g = u = t([n(\"esri.layers.support.PixelBlock\")], g);\nconst m = g;\nexport { m as default };","map":{"version":3,"names":["_","t","e","JSONSupport","s","clone","i","l","isSome","r","isNone","o","property","a","cast","h","subclass","n","SimpleBandStatistics","p","getPixelValueRange","c","u","g","createEmptyBand","getPixelArrayConstructor","Uint8Array","Uint16Array","Uint32Array","Int8Array","Int16Array","Int32Array","Float32Array","Float64Array","constructor","width","height","pixelType","validPixelCount","mask","maskIsAlpha","premultiplyAlpha","statistics","depthCount","castPixelType","toLowerCase","includes","getPlaneCount","pixels","length","addData","push","getAsRGBA","ArrayBuffer","_fillFromNon8Bit","_fillFrom8Bit","Uint8ClampedArray","getAsRGBAFloat","_fillFrom32Bit","updateStatistics","map","_calculateBandStatistics","clamp","extractBands","some","slice","getLogger","declaredClass","error","minValue","Math","min","maxValue","max","Number","MAX_VALUE","m","d","f","json","write","prototype","default"],"sources":["C:/Users/akaps/Documents/Visual Studio 2022/Projects/MT_LRS/WebPresentation/node_modules/@arcgis/core/layers/support/PixelBlock.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport{_ as t}from\"../../chunks/tslib.es6.js\";import e from\"../../core/Error.js\";import{JSONSupport as s}from\"../../core/JSONSupport.js\";import{clone as i}from\"../../core/lang.js\";import l from\"../../core/Logger.js\";import{isSome as r,isNone as o}from\"../../core/maybe.js\";import{property as a}from\"../../core/accessorSupport/decorators/property.js\";import{cast as h}from\"../../core/accessorSupport/decorators/cast.js\";import{subclass as n}from\"../../core/accessorSupport/decorators/subclass.js\";import{SimpleBandStatistics as p}from\"./SimpleBandStatistics.js\";import{getPixelValueRange as c}from\"./rasterFormats/pixelRangeUtils.js\";var u;let g=u=class extends s{static createEmptyBand(t,e){return new(u.getPixelArrayConstructor(t))(e)}static getPixelArrayConstructor(t){let e;switch(t){case\"u1\":case\"u2\":case\"u4\":case\"u8\":e=Uint8Array;break;case\"u16\":e=Uint16Array;break;case\"u32\":e=Uint32Array;break;case\"s8\":e=Int8Array;break;case\"s16\":e=Int16Array;break;case\"s32\":e=Int32Array;break;case\"f32\":case\"c64\":case\"c128\":case\"unknown\":e=Float32Array;break;case\"f64\":e=Float64Array}return e}constructor(t){super(t),this.width=null,this.height=null,this.pixelType=\"f32\",this.validPixelCount=null,this.mask=null,this.maskIsAlpha=!1,this.premultiplyAlpha=!1,this.statistics=null,this.depthCount=1}castPixelType(t){if(!t)return\"f32\";let e=t.toLowerCase();return[\"u1\",\"u2\",\"u4\"].includes(e)?e=\"u8\":[\"unknown\",\"u8\",\"s8\",\"u16\",\"s16\",\"u32\",\"s32\",\"f32\",\"f64\"].includes(e)||(e=\"f32\"),e}getPlaneCount(){return this.pixels?.length}addData(t){if(!t.pixels||t.pixels.length!==this.width*this.height)throw new e(\"pixelblock:invalid-or-missing-pixels\",\"add data requires valid pixels array that has same length defined by pixel block width * height\");this.pixels||(this.pixels=[]),this.statistics||(this.statistics=[]),this.pixels.push(t.pixels),this.statistics.push(t.statistics??new p)}getAsRGBA(){const t=new ArrayBuffer(this.width*this.height*4);switch(this.pixelType){case\"s8\":case\"s16\":case\"u16\":case\"s32\":case\"u32\":case\"f32\":case\"f64\":this._fillFromNon8Bit(t);break;default:this._fillFrom8Bit(t)}return new Uint8ClampedArray(t)}getAsRGBAFloat(){const t=new Float32Array(this.width*this.height*4);return this._fillFrom32Bit(t),t}updateStatistics(){if(!this.pixels)return;this.statistics=this.pixels.map((t=>this._calculateBandStatistics(t,this.mask)));const t=this.mask;let e=0;if(r(t))for(let s=0;s<t.length;s++)t[s]&&e++;else e=this.width*this.height;this.validPixelCount=e}clamp(t){if(!t||\"f64\"===t||\"f32\"===t||!this.pixels)return;const[e,s]=c(t),i=this.pixels,l=this.width*this.height,r=i.length;let o,a,h;const n=[];for(let p=0;p<r;p++){h=u.createEmptyBand(t,l),o=i[p];for(let t=0;t<l;t++)a=o[t],h[t]=a>s?s:a<e?e:a;n.push(h)}this.pixels=n,this.pixelType=t}extractBands(t){const{pixels:e,statistics:s}=this;if(o(t)||0===t.length||!e||0===e.length)return this;const i=e.length,l=t.some((t=>t>=e.length)),r=i===t.length&&!t.some(((t,e)=>t!==e));return l||r?this:new u({pixelType:this.pixelType,width:this.width,height:this.height,mask:this.mask,validPixelCount:this.validPixelCount,maskIsAlpha:this.maskIsAlpha,pixels:t.map((t=>e[t])),statistics:s&&t.map((t=>s[t]))})}clone(){const t=new u({width:this.width,height:this.height,pixelType:this.pixelType,maskIsAlpha:this.maskIsAlpha,validPixelCount:this.validPixelCount});let e;r(this.mask)&&(this.mask instanceof Uint8Array?t.mask=new Uint8Array(this.mask):t.mask=this.mask.slice(0));const s=u.getPixelArrayConstructor(this.pixelType);if(this.pixels&&this.pixels.length>0){t.pixels=[];const i=!!this.pixels[0].slice;for(e=0;e<this.pixels.length;e++)t.pixels[e]=i?this.pixels[e].slice(0,this.pixels[e].length):new s(this.pixels[e])}if(this.statistics)for(t.statistics=[],e=0;e<this.statistics.length;e++)t.statistics[e]=i(this.statistics[e]);return t.premultiplyAlpha=this.premultiplyAlpha,t}_fillFrom8Bit(t){const{mask:e,maskIsAlpha:s,premultiplyAlpha:i,pixels:o}=this;if(!t||!o||!o.length)return void l.getLogger(this.declaredClass).error(\"getAsRGBA()\",\"Unable to convert to RGBA. The input pixel block is empty.\");let a,h,n,p;a=h=n=o[0],o.length>=3?(h=o[1],n=o[2]):2===o.length&&(h=o[1]);const c=new Uint32Array(t),u=this.width*this.height;if(a.length===u)if(r(e)&&e.length===u)if(s)for(p=0;p<u;p++){const t=e[p];if(t){const e=t/255;c[p]=i?t<<24|n[p]*e<<16|h[p]*e<<8|a[p]*e:t<<24|n[p]<<16|h[p]<<8|a[p]}}else for(p=0;p<u;p++)e[p]&&(c[p]=255<<24|n[p]<<16|h[p]<<8|a[p]);else for(p=0;p<u;p++)c[p]=255<<24|n[p]<<16|h[p]<<8|a[p];else l.getLogger(this.declaredClass).error(\"getAsRGBA()\",\"Unable to convert to RGBA. The pixelblock is invalid.\")}_fillFromNon8Bit(t){const{pixels:e,mask:s,statistics:i}=this;if(!t||!e||!e.length)return void l.getLogger(this.declaredClass).error(\"getAsRGBA()\",\"Unable to convert to RGBA. The input pixel block is empty.\");const o=this.pixelType;let a=1,h=0,n=1;if(i&&i.length>0){for(const t of i)if(null!=t.minValue&&(h=Math.min(h,t.minValue)),null!=t.maxValue&&null!=t.minValue){const e=t.maxValue-t.minValue;n=Math.max(n,e)}a=255/n}else{let t=255;\"s8\"===o?(h=-128,t=127):\"u16\"===o?t=65535:\"s16\"===o?(h=-32768,t=32767):\"u32\"===o?t=4294967295:\"s32\"===o?(h=-2147483648,t=2147483647):\"f32\"===o?(h=-34e38,t=34e38):\"f64\"===o&&(h=-Number.MAX_VALUE,t=Number.MAX_VALUE),a=255/(t-h)}const p=new Uint32Array(t),c=this.width*this.height;let u,g,m,d,f;if(u=g=m=e[0],u.length!==c)return l.getLogger(this.declaredClass).error(\"getAsRGBA()\",\"Unable to convert to RGBA. The pixelblock is invalid.\");if(e.length>=2)if(g=e[1],e.length>=3&&(m=e[2]),r(s)&&s.length===c)for(d=0;d<c;d++)s[d]&&(p[d]=255<<24|(m[d]-h)*a<<16|(g[d]-h)*a<<8|(u[d]-h)*a);else for(d=0;d<c;d++)p[d]=255<<24|(m[d]-h)*a<<16|(g[d]-h)*a<<8|(u[d]-h)*a;else if(r(s)&&s.length===c)for(d=0;d<c;d++)f=(u[d]-h)*a,s[d]&&(p[d]=255<<24|f<<16|f<<8|f);else for(d=0;d<c;d++)f=(u[d]-h)*a,p[d]=255<<24|f<<16|f<<8|f}_fillFrom32Bit(t){const{pixels:e,mask:s}=this;if(!t||!e||!e.length)return l.getLogger(this.declaredClass).error(\"getAsRGBAFloat()\",\"Unable to convert to RGBA. The input pixel block is empty.\");let i,o,a,h;i=o=a=e[0],e.length>=3?(o=e[1],a=e[2]):2===e.length&&(o=e[1]);const n=this.width*this.height;if(i.length!==n)return l.getLogger(this.declaredClass).error(\"getAsRGBAFloat()\",\"Unable to convert to RGBA. The pixelblock is invalid.\");let p=0;if(r(s)&&s.length===n)for(h=0;h<n;h++)t[p++]=i[h],t[p++]=o[h],t[p++]=a[h],t[p++]=1&s[h];else for(h=0;h<n;h++)t[p++]=i[h],t[p++]=o[h],t[p++]=a[h],t[p++]=1}_calculateBandStatistics(t,e){let s=1/0,i=-1/0;const l=t.length;let o,a=0;if(r(e))for(o=0;o<l;o++)e[o]&&(a=t[o],s=a<s?a:s,i=a>i?a:i);else for(o=0;o<l;o++)a=t[o],s=a<s?a:s,i=a>i?a:i;return new p(s,i)}};t([a({json:{write:!0}})],g.prototype,\"width\",void 0),t([a({json:{write:!0}})],g.prototype,\"height\",void 0),t([a({json:{write:!0}})],g.prototype,\"pixelType\",void 0),t([h(\"pixelType\")],g.prototype,\"castPixelType\",null),t([a({json:{write:!0}})],g.prototype,\"validPixelCount\",void 0),t([a({json:{write:!0}})],g.prototype,\"mask\",void 0),t([a({json:{write:!0}})],g.prototype,\"maskIsAlpha\",void 0),t([a({json:{write:!0}})],g.prototype,\"pixels\",void 0),t([a()],g.prototype,\"premultiplyAlpha\",void 0),t([a({json:{write:!0}})],g.prototype,\"statistics\",void 0),t([a({json:{write:!0}})],g.prototype,\"depthCount\",void 0),t([a({json:{write:!0}})],g.prototype,\"noDataValues\",void 0),t([a({json:{write:!0}})],g.prototype,\"bandMasks\",void 0),g=u=t([n(\"esri.layers.support.PixelBlock\")],g);const m=g;export{m as default};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}