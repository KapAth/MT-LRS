{"ast":null,"code":"/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.0.7\n */\nimport { v as containsCrossShadowBoundary, r as closestElementCrossShadowBoundary } from './dom.js';\nimport { n as numberKeys } from './key.js';\nimport { c as createObserver } from './observers.js';\nconst defaultMinusSignRegex = new RegExp(\"-\", \"g\");\nconst unnecessaryDecimalRegex = new RegExp(\"\\\\.?0+$\"); // adopted from https://stackoverflow.com/a/66939244\n\nclass BigDecimal {\n  constructor(input) {\n    this.add = num => BigDecimal.fromBigInt(this.value + new BigDecimal(num).value);\n\n    this.subtract = num => BigDecimal.fromBigInt(this.value - new BigDecimal(num).value);\n\n    this.multiply = num => BigDecimal._divRound(this.value * new BigDecimal(num).value, BigDecimal.SHIFT);\n\n    this.divide = num => BigDecimal._divRound(this.value * BigDecimal.SHIFT, new BigDecimal(num).value);\n\n    if (input instanceof BigDecimal) {\n      return input;\n    }\n\n    const [integers, decimals] = String(input).split(\".\").concat(\"\");\n    this.value = BigInt(integers + decimals.padEnd(BigDecimal.DECIMALS, \"0\").slice(0, BigDecimal.DECIMALS)) + BigInt(BigDecimal.ROUNDED && decimals[BigDecimal.DECIMALS] >= \"5\");\n    this.isNegative = input.charAt(0) === \"-\";\n  }\n\n  getIntegersAndDecimals() {\n    const s = this.value.toString().replace(defaultMinusSignRegex, \"\").padStart(BigDecimal.DECIMALS + 1, \"0\");\n    const integers = s.slice(0, -BigDecimal.DECIMALS);\n    const decimals = s.slice(-BigDecimal.DECIMALS).replace(unnecessaryDecimalRegex, \"\");\n    return {\n      integers,\n      decimals\n    };\n  }\n\n  toString() {\n    const {\n      integers,\n      decimals\n    } = this.getIntegersAndDecimals();\n    return `${this.isNegative ? \"-\" : \"\"}${integers}${decimals.length ? \".\" + decimals : \"\"}`;\n  }\n\n  formatToParts(formatter) {\n    const {\n      integers,\n      decimals\n    } = this.getIntegersAndDecimals();\n    const parts = formatter.numberFormatter.formatToParts(BigInt(integers));\n    this.isNegative && parts.unshift({\n      type: \"minusSign\",\n      value: formatter.minusSign\n    });\n\n    if (decimals.length) {\n      parts.push({\n        type: \"decimal\",\n        value: formatter.decimal\n      });\n      decimals.split(\"\").forEach(char => parts.push({\n        type: \"fraction\",\n        value: char\n      }));\n    }\n\n    return parts;\n  }\n\n  format(formatter) {\n    const {\n      integers,\n      decimals\n    } = this.getIntegersAndDecimals();\n    const integersFormatted = `${this.isNegative ? formatter.minusSign : \"\"}${formatter.numberFormatter.format(BigInt(integers))}`;\n    const decimalsFormatted = decimals.length ? `${formatter.decimal}${decimals.split(\"\").map(char => formatter.numberFormatter.format(Number(char))).join(\"\")}` : \"\";\n    return `${integersFormatted}${decimalsFormatted}`;\n  }\n\n} // Configuration: constants\n\n\nBigDecimal.DECIMALS = 100; // number of decimals on all instances\n\nBigDecimal.ROUNDED = true; // numbers are truncated (false) or rounded (true)\n\nBigDecimal.SHIFT = BigInt(\"1\" + \"0\".repeat(BigDecimal.DECIMALS)); // derived constant\n\nBigDecimal._divRound = (dividend, divisor) => BigDecimal.fromBigInt(dividend / divisor + (BigDecimal.ROUNDED ? dividend * BigInt(2) / divisor % BigInt(2) : BigInt(0)));\n\nBigDecimal.fromBigInt = bigint => Object.assign(Object.create(BigDecimal.prototype), {\n  value: bigint\n});\n\nfunction isValidNumber(numberString) {\n  return !(!numberString || isNaN(Number(numberString)));\n}\n\nfunction parseNumberString(numberString) {\n  if (!numberString || !stringContainsNumbers(numberString)) {\n    return \"\";\n  }\n\n  return sanitizeExponentialNumberString(numberString, nonExpoNumString => {\n    let containsDecimal = false;\n    const result = nonExpoNumString.split(\"\").filter((value, i) => {\n      if (value.match(/\\./g) && !containsDecimal) {\n        containsDecimal = true;\n        return true;\n      }\n\n      if (value.match(/\\-/g) && i === 0) {\n        return true;\n      }\n\n      return numberKeys.includes(value);\n    }).reduce((string, part) => string + part);\n    return isValidNumber(result) ? new BigDecimal(result).toString() : \"\";\n  });\n} // regex for number sanitization\n\n\nconst allLeadingZerosOptionallyNegative = /^([-0])0+(?=\\d)/;\nconst decimalOnlyAtEndOfString = /(?!^\\.)\\.$/;\nconst allHyphensExceptTheStart = /(?!^-)-/g;\nconst isNegativeDecimalOnlyZeros = /^-\\b0\\b\\.?0*$/;\n\nconst sanitizeNumberString = numberString => sanitizeExponentialNumberString(numberString, nonExpoNumString => {\n  const sanitizedValue = nonExpoNumString.replace(allHyphensExceptTheStart, \"\").replace(decimalOnlyAtEndOfString, \"\").replace(allLeadingZerosOptionallyNegative, \"$1\");\n  return isValidNumber(sanitizedValue) ? isNegativeDecimalOnlyZeros.test(sanitizedValue) ? sanitizedValue : new BigDecimal(sanitizedValue).toString() : nonExpoNumString;\n});\n\nfunction sanitizeExponentialNumberString(numberString, func) {\n  if (!numberString) {\n    return numberString;\n  }\n\n  const firstE = numberString.toLowerCase().indexOf(\"e\") + 1;\n\n  if (!firstE) {\n    return func(numberString);\n  }\n\n  return numberString.replace(/[eE]*$/g, \"\").substring(0, firstE).concat(numberString.slice(firstE).replace(/[eE]/g, \"\")).split(/[eE]/).map((section, i) => i === 1 ? func(section.replace(/\\./g, \"\")) : func(section)).join(\"e\").replace(/^e/, \"1e\");\n}\n\nfunction stringContainsNumbers(string) {\n  return numberKeys.some(number => string.includes(number));\n}\n\nconst defaultLocale = \"en\";\nconst t9nLocales = [\"ar\", \"bg\", \"bs\", \"ca\", \"cs\", \"da\", \"de\", \"el\", defaultLocale, \"es\", \"et\", \"fi\", \"fr\", \"he\", \"hr\", \"hu\", \"id\", \"it\", \"ja\", \"ko\", \"lt\", \"lv\", \"no\", \"nl\", \"pl\", \"pt-BR\", \"pt-PT\", \"ro\", \"ru\", \"sk\", \"sl\", \"sr\", \"sv\", \"th\", \"tr\", \"uk\", \"vi\", \"zh-CN\", \"zh-HK\", \"zh-TW\"];\nconst locales = [\"ar\", \"bg\", \"bs\", \"ca\", \"cs\", \"da\", \"de\", \"de-CH\", \"el\", defaultLocale, \"en-AU\", \"en-CA\", \"en-GB\", \"es\", \"es-MX\", \"et\", \"fi\", \"fr\", \"fr-CH\", \"he\", \"hi\", \"hr\", \"hu\", \"id\", \"it\", \"it-CH\", \"ja\", \"ko\", \"lt\", \"lv\", \"mk\", \"no\", \"nl\", \"pl\", \"pt\", \"pt-PT\", \"ro\", \"ru\", \"sk\", \"sl\", \"sr\", \"sv\", \"th\", \"tr\", \"uk\", \"vi\", \"zh-CN\", \"zh-HK\", \"zh-TW\"];\nconst numberingSystems = [\"arab\", \"arabext\", \"bali\", \"beng\", \"deva\", \"fullwide\", \"gujr\", \"guru\", \"hanidec\", \"khmr\", \"knda\", \"laoo\", \"latn\", \"limb\", \"mlym\", \"mong\", \"mymr\", \"orya\", \"tamldec\", \"telu\", \"thai\", \"tibt\"];\n\nconst isNumberingSystemSupported = numberingSystem => numberingSystems.includes(numberingSystem);\n\nconst browserNumberingSystem = new Intl.NumberFormat().resolvedOptions().numberingSystem;\nconst defaultNumberingSystem = browserNumberingSystem === \"arab\" || !isNumberingSystemSupported(browserNumberingSystem) ? \"latn\" : browserNumberingSystem;\n\nconst getSupportedNumberingSystem = numberingSystem => isNumberingSystemSupported(numberingSystem) ? numberingSystem : defaultNumberingSystem;\n/**\n * Gets the locale that best matches the context.\n *\n * @param locale â€“ the BCP 47 locale code\n * @param context - specifies whether the locale code should match in the context of CLDR or T9N (translation)\n */\n\n\nfunction getSupportedLocale(locale, context = \"cldr\") {\n  const contextualLocales = context === \"cldr\" ? locales : t9nLocales;\n\n  if (!locale) {\n    return defaultLocale;\n  }\n\n  if (contextualLocales.includes(locale)) {\n    return locale;\n  }\n\n  locale = locale.toLowerCase(); // we support both 'nb' and 'no' (BCP 47) for Norwegian but only `no` has corresponding bundle\n\n  if (locale === \"nb\") {\n    return \"no\";\n  } // we use `pt-BR` as it will have the same translations as `pt`, which has no corresponding bundle\n\n\n  if (context === \"t9n\" && locale === \"pt\") {\n    return \"pt-BR\";\n  }\n\n  if (locale.includes(\"-\")) {\n    locale = locale.replace(/(\\w+)-(\\w+)/, (_match, language, region) => `${language}-${region.toUpperCase()}`);\n\n    if (!contextualLocales.includes(locale)) {\n      locale = locale.split(\"-\")[0];\n    }\n  } // we can `zh-CN` as base translation for chinese locales which has no corresponding bundle.\n\n\n  if (locale === \"zh\") {\n    return \"zh-CN\";\n  }\n\n  if (!contextualLocales.includes(locale)) {\n    console.warn(`Translations for the \"${locale}\" locale are not available and will fall back to the default, English (en).`);\n    return defaultLocale;\n  }\n\n  return locale;\n}\n\nconst connectedComponents = new Set();\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback` before any logic that depends on locale\n *\n * @param component\n */\n\nfunction connectLocalized(component) {\n  updateEffectiveLocale(component);\n\n  if (connectedComponents.size === 0) {\n    mutationObserver?.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"lang\"],\n      subtree: true\n    });\n  }\n\n  connectedComponents.add(component);\n}\n/**\n * This is only exported for components that implemented the now deprecated `locale` prop.\n *\n * Do not use this utils for new components.\n *\n * @param component\n */\n\n\nfunction updateEffectiveLocale(component) {\n  component.effectiveLocale = getLocale(component);\n}\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\n\n\nfunction disconnectLocalized(component) {\n  connectedComponents.delete(component);\n\n  if (connectedComponents.size === 0) {\n    mutationObserver.disconnect();\n  }\n}\n\nconst mutationObserver = createObserver(\"mutation\", records => {\n  records.forEach(record => {\n    const el = record.target;\n    connectedComponents.forEach(component => {\n      const inUnrelatedSubtree = !containsCrossShadowBoundary(el, component.el);\n\n      if (inUnrelatedSubtree) {\n        return;\n      }\n\n      const closestLangEl = closestElementCrossShadowBoundary(component.el, \"[lang]\");\n\n      if (!closestLangEl) {\n        component.effectiveLocale = defaultLocale;\n        return;\n      }\n\n      const closestLang = closestLangEl.lang;\n      component.effectiveLocale = // user set lang=\"\" means unknown language, so we use default\n      closestLangEl.hasAttribute(\"lang\") && closestLang === \"\" ? defaultLocale : closestLang;\n    });\n  });\n});\n/**\n * This util helps resolve a component's locale.\n * It will also fall back on the deprecated `locale` if a component implemented this previously.\n *\n * @param component\n */\n\nfunction getLocale(component) {\n  return component.el.lang || closestElementCrossShadowBoundary(component.el, \"[lang]\")?.lang || document.documentElement.lang || defaultLocale;\n}\n/**\n * This util formats and parses numbers for localization\n */\n\n\nclass NumberStringFormat {\n  constructor() {\n    this.delocalize = numberString => // For performance, (de)localization is skipped if the formatter isn't initialized.\n    // In order to localize/delocalize, e.g. when lang/numberingSystem props are not default values,\n    // `numberFormatOptions` must be set in a component to create and cache the formatter.\n    this._numberFormatOptions ? sanitizeExponentialNumberString(numberString, nonExpoNumString => nonExpoNumString.trim().replace(new RegExp(`[${this._minusSign}]`, \"g\"), \"-\").replace(new RegExp(`[${this._group}]`, \"g\"), \"\").replace(new RegExp(`[${this._decimal}]`, \"g\"), \".\").replace(new RegExp(`[${this._digits.join(\"\")}]`, \"g\"), this._getDigitIndex)) : numberString;\n\n    this.localize = numberString => this._numberFormatOptions ? sanitizeExponentialNumberString(numberString, nonExpoNumString => isValidNumber(nonExpoNumString.trim()) ? new BigDecimal(nonExpoNumString.trim()).format(this).replace(new RegExp(`[${this._actualGroup}]`, \"g\"), this._group) : nonExpoNumString) : numberString;\n  }\n\n  get group() {\n    return this._group;\n  }\n\n  get decimal() {\n    return this._decimal;\n  }\n\n  get minusSign() {\n    return this._minusSign;\n  }\n\n  get digits() {\n    return this._digits;\n  }\n\n  get numberFormatter() {\n    return this._numberFormatter;\n  }\n\n  get numberFormatOptions() {\n    return this._numberFormatOptions;\n  }\n  /**\n   * numberFormatOptions needs to be set before localize/delocalize is called to ensure the options are up to date\n   */\n\n\n  set numberFormatOptions(options) {\n    options.locale = getSupportedLocale(options?.locale);\n    options.numberingSystem = getSupportedNumberingSystem(options?.numberingSystem);\n\n    if ( // No need to create the formatter if `locale` and `numberingSystem`\n    // are the default values and `numberFormatOptions` has not been set\n    !this._numberFormatOptions && options.locale === defaultLocale && options.numberingSystem === defaultNumberingSystem && // don't skip initialization if any options besides locale/numberingSystem are set\n    Object.keys(options).length === 2 || // cache formatter by only recreating when options change\n    JSON.stringify(this._numberFormatOptions) === JSON.stringify(options)) {\n      return;\n    }\n\n    this._numberFormatOptions = options;\n    this._numberFormatter = new Intl.NumberFormat(this._numberFormatOptions.locale, this._numberFormatOptions);\n    this._digits = [...new Intl.NumberFormat(this._numberFormatOptions.locale, {\n      useGrouping: false,\n      numberingSystem: this._numberFormatOptions.numberingSystem\n    }).format(9876543210)].reverse();\n    const index = new Map(this._digits.map((d, i) => [d, i]));\n    const parts = new Intl.NumberFormat(this._numberFormatOptions.locale).formatToParts(-12345678.9);\n    this._actualGroup = parts.find(d => d.type === \"group\").value; // change whitespace group characters that don't render correctly\n\n    this._group = this._actualGroup.trim().length === 0 ? \" \" : this._actualGroup;\n    this._decimal = parts.find(d => d.type === \"decimal\").value;\n    this._minusSign = parts.find(d => d.type === \"minusSign\").value;\n\n    this._getDigitIndex = d => index.get(d);\n  }\n\n}\n\nconst numberStringFormatter = new NumberStringFormat();\nexport { defaultNumberingSystem as a, getSupportedNumberingSystem as b, connectLocalized as c, disconnectLocalized as d, getSupportedLocale as g, isValidNumber as i, numberStringFormatter as n, parseNumberString as p, sanitizeNumberString as s };","map":{"version":3,"names":["v","containsCrossShadowBoundary","r","closestElementCrossShadowBoundary","n","numberKeys","c","createObserver","defaultMinusSignRegex","RegExp","unnecessaryDecimalRegex","BigDecimal","constructor","input","add","num","fromBigInt","value","subtract","multiply","_divRound","SHIFT","divide","integers","decimals","String","split","concat","BigInt","padEnd","DECIMALS","slice","ROUNDED","isNegative","charAt","getIntegersAndDecimals","s","toString","replace","padStart","length","formatToParts","formatter","parts","numberFormatter","unshift","type","minusSign","push","decimal","forEach","char","format","integersFormatted","decimalsFormatted","map","Number","join","repeat","dividend","divisor","bigint","Object","assign","create","prototype","isValidNumber","numberString","isNaN","parseNumberString","stringContainsNumbers","sanitizeExponentialNumberString","nonExpoNumString","containsDecimal","result","filter","i","match","includes","reduce","string","part","allLeadingZerosOptionallyNegative","decimalOnlyAtEndOfString","allHyphensExceptTheStart","isNegativeDecimalOnlyZeros","sanitizeNumberString","sanitizedValue","test","func","firstE","toLowerCase","indexOf","substring","section","some","number","defaultLocale","t9nLocales","locales","numberingSystems","isNumberingSystemSupported","numberingSystem","browserNumberingSystem","Intl","NumberFormat","resolvedOptions","defaultNumberingSystem","getSupportedNumberingSystem","getSupportedLocale","locale","context","contextualLocales","_match","language","region","toUpperCase","console","warn","connectedComponents","Set","connectLocalized","component","updateEffectiveLocale","size","mutationObserver","observe","document","documentElement","attributes","attributeFilter","subtree","effectiveLocale","getLocale","disconnectLocalized","delete","disconnect","records","record","el","target","inUnrelatedSubtree","closestLangEl","closestLang","lang","hasAttribute","NumberStringFormat","delocalize","_numberFormatOptions","trim","_minusSign","_group","_decimal","_digits","_getDigitIndex","localize","_actualGroup","group","digits","_numberFormatter","numberFormatOptions","options","keys","JSON","stringify","useGrouping","reverse","index","Map","d","find","get","numberStringFormatter","a","b","g","p"],"sources":["C:/Users/akaps/Documents/Visual Studio 2022/Projects/MT_LRS/WebPresentation/node_modules/@esri/calcite-components/dist/components/locale.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.0.7\n */\nimport { v as containsCrossShadowBoundary, r as closestElementCrossShadowBoundary } from './dom.js';\nimport { n as numberKeys } from './key.js';\nimport { c as createObserver } from './observers.js';\n\nconst defaultMinusSignRegex = new RegExp(\"-\", \"g\");\nconst unnecessaryDecimalRegex = new RegExp(\"\\\\.?0+$\");\n// adopted from https://stackoverflow.com/a/66939244\nclass BigDecimal {\n  constructor(input) {\n    this.add = (num) => BigDecimal.fromBigInt(this.value + new BigDecimal(num).value);\n    this.subtract = (num) => BigDecimal.fromBigInt(this.value - new BigDecimal(num).value);\n    this.multiply = (num) => BigDecimal._divRound(this.value * new BigDecimal(num).value, BigDecimal.SHIFT);\n    this.divide = (num) => BigDecimal._divRound(this.value * BigDecimal.SHIFT, new BigDecimal(num).value);\n    if (input instanceof BigDecimal) {\n      return input;\n    }\n    const [integers, decimals] = String(input).split(\".\").concat(\"\");\n    this.value =\n      BigInt(integers + decimals.padEnd(BigDecimal.DECIMALS, \"0\").slice(0, BigDecimal.DECIMALS)) +\n        BigInt(BigDecimal.ROUNDED && decimals[BigDecimal.DECIMALS] >= \"5\");\n    this.isNegative = input.charAt(0) === \"-\";\n  }\n  getIntegersAndDecimals() {\n    const s = this.value\n      .toString()\n      .replace(defaultMinusSignRegex, \"\")\n      .padStart(BigDecimal.DECIMALS + 1, \"0\");\n    const integers = s.slice(0, -BigDecimal.DECIMALS);\n    const decimals = s.slice(-BigDecimal.DECIMALS).replace(unnecessaryDecimalRegex, \"\");\n    return { integers, decimals };\n  }\n  toString() {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    return `${this.isNegative ? \"-\" : \"\"}${integers}${decimals.length ? \".\" + decimals : \"\"}`;\n  }\n  formatToParts(formatter) {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    const parts = formatter.numberFormatter.formatToParts(BigInt(integers));\n    this.isNegative && parts.unshift({ type: \"minusSign\", value: formatter.minusSign });\n    if (decimals.length) {\n      parts.push({ type: \"decimal\", value: formatter.decimal });\n      decimals.split(\"\").forEach((char) => parts.push({ type: \"fraction\", value: char }));\n    }\n    return parts;\n  }\n  format(formatter) {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    const integersFormatted = `${this.isNegative ? formatter.minusSign : \"\"}${formatter.numberFormatter.format(BigInt(integers))}`;\n    const decimalsFormatted = decimals.length\n      ? `${formatter.decimal}${decimals\n        .split(\"\")\n        .map((char) => formatter.numberFormatter.format(Number(char)))\n        .join(\"\")}`\n      : \"\";\n    return `${integersFormatted}${decimalsFormatted}`;\n  }\n}\n// Configuration: constants\nBigDecimal.DECIMALS = 100; // number of decimals on all instances\nBigDecimal.ROUNDED = true; // numbers are truncated (false) or rounded (true)\nBigDecimal.SHIFT = BigInt(\"1\" + \"0\".repeat(BigDecimal.DECIMALS)); // derived constant\nBigDecimal._divRound = (dividend, divisor) => BigDecimal.fromBigInt(dividend / divisor + (BigDecimal.ROUNDED ? ((dividend * BigInt(2)) / divisor) % BigInt(2) : BigInt(0)));\nBigDecimal.fromBigInt = (bigint) => Object.assign(Object.create(BigDecimal.prototype), { value: bigint });\nfunction isValidNumber(numberString) {\n  return !(!numberString || isNaN(Number(numberString)));\n}\nfunction parseNumberString(numberString) {\n  if (!numberString || !stringContainsNumbers(numberString)) {\n    return \"\";\n  }\n  return sanitizeExponentialNumberString(numberString, (nonExpoNumString) => {\n    let containsDecimal = false;\n    const result = nonExpoNumString\n      .split(\"\")\n      .filter((value, i) => {\n      if (value.match(/\\./g) && !containsDecimal) {\n        containsDecimal = true;\n        return true;\n      }\n      if (value.match(/\\-/g) && i === 0) {\n        return true;\n      }\n      return numberKeys.includes(value);\n    })\n      .reduce((string, part) => string + part);\n    return isValidNumber(result) ? new BigDecimal(result).toString() : \"\";\n  });\n}\n// regex for number sanitization\nconst allLeadingZerosOptionallyNegative = /^([-0])0+(?=\\d)/;\nconst decimalOnlyAtEndOfString = /(?!^\\.)\\.$/;\nconst allHyphensExceptTheStart = /(?!^-)-/g;\nconst isNegativeDecimalOnlyZeros = /^-\\b0\\b\\.?0*$/;\nconst sanitizeNumberString = (numberString) => sanitizeExponentialNumberString(numberString, (nonExpoNumString) => {\n  const sanitizedValue = nonExpoNumString\n    .replace(allHyphensExceptTheStart, \"\")\n    .replace(decimalOnlyAtEndOfString, \"\")\n    .replace(allLeadingZerosOptionallyNegative, \"$1\");\n  return isValidNumber(sanitizedValue)\n    ? isNegativeDecimalOnlyZeros.test(sanitizedValue)\n      ? sanitizedValue\n      : new BigDecimal(sanitizedValue).toString()\n    : nonExpoNumString;\n});\nfunction sanitizeExponentialNumberString(numberString, func) {\n  if (!numberString) {\n    return numberString;\n  }\n  const firstE = numberString.toLowerCase().indexOf(\"e\") + 1;\n  if (!firstE) {\n    return func(numberString);\n  }\n  return numberString\n    .replace(/[eE]*$/g, \"\")\n    .substring(0, firstE)\n    .concat(numberString.slice(firstE).replace(/[eE]/g, \"\"))\n    .split(/[eE]/)\n    .map((section, i) => (i === 1 ? func(section.replace(/\\./g, \"\")) : func(section)))\n    .join(\"e\")\n    .replace(/^e/, \"1e\");\n}\nfunction stringContainsNumbers(string) {\n  return numberKeys.some((number) => string.includes(number));\n}\n\nconst defaultLocale = \"en\";\nconst t9nLocales = [\n  \"ar\",\n  \"bg\",\n  \"bs\",\n  \"ca\",\n  \"cs\",\n  \"da\",\n  \"de\",\n  \"el\",\n  defaultLocale,\n  \"es\",\n  \"et\",\n  \"fi\",\n  \"fr\",\n  \"he\",\n  \"hr\",\n  \"hu\",\n  \"id\",\n  \"it\",\n  \"ja\",\n  \"ko\",\n  \"lt\",\n  \"lv\",\n  \"no\",\n  \"nl\",\n  \"pl\",\n  \"pt-BR\",\n  \"pt-PT\",\n  \"ro\",\n  \"ru\",\n  \"sk\",\n  \"sl\",\n  \"sr\",\n  \"sv\",\n  \"th\",\n  \"tr\",\n  \"uk\",\n  \"vi\",\n  \"zh-CN\",\n  \"zh-HK\",\n  \"zh-TW\"\n];\nconst locales = [\n  \"ar\",\n  \"bg\",\n  \"bs\",\n  \"ca\",\n  \"cs\",\n  \"da\",\n  \"de\",\n  \"de-CH\",\n  \"el\",\n  defaultLocale,\n  \"en-AU\",\n  \"en-CA\",\n  \"en-GB\",\n  \"es\",\n  \"es-MX\",\n  \"et\",\n  \"fi\",\n  \"fr\",\n  \"fr-CH\",\n  \"he\",\n  \"hi\",\n  \"hr\",\n  \"hu\",\n  \"id\",\n  \"it\",\n  \"it-CH\",\n  \"ja\",\n  \"ko\",\n  \"lt\",\n  \"lv\",\n  \"mk\",\n  \"no\",\n  \"nl\",\n  \"pl\",\n  \"pt\",\n  \"pt-PT\",\n  \"ro\",\n  \"ru\",\n  \"sk\",\n  \"sl\",\n  \"sr\",\n  \"sv\",\n  \"th\",\n  \"tr\",\n  \"uk\",\n  \"vi\",\n  \"zh-CN\",\n  \"zh-HK\",\n  \"zh-TW\"\n];\nconst numberingSystems = [\n  \"arab\",\n  \"arabext\",\n  \"bali\",\n  \"beng\",\n  \"deva\",\n  \"fullwide\",\n  \"gujr\",\n  \"guru\",\n  \"hanidec\",\n  \"khmr\",\n  \"knda\",\n  \"laoo\",\n  \"latn\",\n  \"limb\",\n  \"mlym\",\n  \"mong\",\n  \"mymr\",\n  \"orya\",\n  \"tamldec\",\n  \"telu\",\n  \"thai\",\n  \"tibt\"\n];\nconst isNumberingSystemSupported = (numberingSystem) => numberingSystems.includes(numberingSystem);\nconst browserNumberingSystem = new Intl.NumberFormat().resolvedOptions().numberingSystem;\nconst defaultNumberingSystem = browserNumberingSystem === \"arab\" || !isNumberingSystemSupported(browserNumberingSystem)\n  ? \"latn\"\n  : browserNumberingSystem;\nconst getSupportedNumberingSystem = (numberingSystem) => isNumberingSystemSupported(numberingSystem) ? numberingSystem : defaultNumberingSystem;\n/**\n * Gets the locale that best matches the context.\n *\n * @param locale â€“ the BCP 47 locale code\n * @param context - specifies whether the locale code should match in the context of CLDR or T9N (translation)\n */\nfunction getSupportedLocale(locale, context = \"cldr\") {\n  const contextualLocales = context === \"cldr\" ? locales : t9nLocales;\n  if (!locale) {\n    return defaultLocale;\n  }\n  if (contextualLocales.includes(locale)) {\n    return locale;\n  }\n  locale = locale.toLowerCase();\n  // we support both 'nb' and 'no' (BCP 47) for Norwegian but only `no` has corresponding bundle\n  if (locale === \"nb\") {\n    return \"no\";\n  }\n  // we use `pt-BR` as it will have the same translations as `pt`, which has no corresponding bundle\n  if (context === \"t9n\" && locale === \"pt\") {\n    return \"pt-BR\";\n  }\n  if (locale.includes(\"-\")) {\n    locale = locale.replace(/(\\w+)-(\\w+)/, (_match, language, region) => `${language}-${region.toUpperCase()}`);\n    if (!contextualLocales.includes(locale)) {\n      locale = locale.split(\"-\")[0];\n    }\n  }\n  // we can `zh-CN` as base translation for chinese locales which has no corresponding bundle.\n  if (locale === \"zh\") {\n    return \"zh-CN\";\n  }\n  if (!contextualLocales.includes(locale)) {\n    console.warn(`Translations for the \"${locale}\" locale are not available and will fall back to the default, English (en).`);\n    return defaultLocale;\n  }\n  return locale;\n}\nconst connectedComponents = new Set();\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback` before any logic that depends on locale\n *\n * @param component\n */\nfunction connectLocalized(component) {\n  updateEffectiveLocale(component);\n  if (connectedComponents.size === 0) {\n    mutationObserver?.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"lang\"],\n      subtree: true\n    });\n  }\n  connectedComponents.add(component);\n}\n/**\n * This is only exported for components that implemented the now deprecated `locale` prop.\n *\n * Do not use this utils for new components.\n *\n * @param component\n */\nfunction updateEffectiveLocale(component) {\n  component.effectiveLocale = getLocale(component);\n}\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nfunction disconnectLocalized(component) {\n  connectedComponents.delete(component);\n  if (connectedComponents.size === 0) {\n    mutationObserver.disconnect();\n  }\n}\nconst mutationObserver = createObserver(\"mutation\", (records) => {\n  records.forEach((record) => {\n    const el = record.target;\n    connectedComponents.forEach((component) => {\n      const inUnrelatedSubtree = !containsCrossShadowBoundary(el, component.el);\n      if (inUnrelatedSubtree) {\n        return;\n      }\n      const closestLangEl = closestElementCrossShadowBoundary(component.el, \"[lang]\");\n      if (!closestLangEl) {\n        component.effectiveLocale = defaultLocale;\n        return;\n      }\n      const closestLang = closestLangEl.lang;\n      component.effectiveLocale =\n        // user set lang=\"\" means unknown language, so we use default\n        closestLangEl.hasAttribute(\"lang\") && closestLang === \"\" ? defaultLocale : closestLang;\n    });\n  });\n});\n/**\n * This util helps resolve a component's locale.\n * It will also fall back on the deprecated `locale` if a component implemented this previously.\n *\n * @param component\n */\nfunction getLocale(component) {\n  return (component.el.lang ||\n    closestElementCrossShadowBoundary(component.el, \"[lang]\")?.lang ||\n    document.documentElement.lang ||\n    defaultLocale);\n}\n/**\n * This util formats and parses numbers for localization\n */\nclass NumberStringFormat {\n  constructor() {\n    this.delocalize = (numberString) => \n    // For performance, (de)localization is skipped if the formatter isn't initialized.\n    // In order to localize/delocalize, e.g. when lang/numberingSystem props are not default values,\n    // `numberFormatOptions` must be set in a component to create and cache the formatter.\n    this._numberFormatOptions\n      ? sanitizeExponentialNumberString(numberString, (nonExpoNumString) => nonExpoNumString\n        .trim()\n        .replace(new RegExp(`[${this._minusSign}]`, \"g\"), \"-\")\n        .replace(new RegExp(`[${this._group}]`, \"g\"), \"\")\n        .replace(new RegExp(`[${this._decimal}]`, \"g\"), \".\")\n        .replace(new RegExp(`[${this._digits.join(\"\")}]`, \"g\"), this._getDigitIndex))\n      : numberString;\n    this.localize = (numberString) => this._numberFormatOptions\n      ? sanitizeExponentialNumberString(numberString, (nonExpoNumString) => isValidNumber(nonExpoNumString.trim())\n        ? new BigDecimal(nonExpoNumString.trim())\n          .format(this)\n          .replace(new RegExp(`[${this._actualGroup}]`, \"g\"), this._group)\n        : nonExpoNumString)\n      : numberString;\n  }\n  get group() {\n    return this._group;\n  }\n  get decimal() {\n    return this._decimal;\n  }\n  get minusSign() {\n    return this._minusSign;\n  }\n  get digits() {\n    return this._digits;\n  }\n  get numberFormatter() {\n    return this._numberFormatter;\n  }\n  get numberFormatOptions() {\n    return this._numberFormatOptions;\n  }\n  /**\n   * numberFormatOptions needs to be set before localize/delocalize is called to ensure the options are up to date\n   */\n  set numberFormatOptions(options) {\n    options.locale = getSupportedLocale(options?.locale);\n    options.numberingSystem = getSupportedNumberingSystem(options?.numberingSystem);\n    if (\n    // No need to create the formatter if `locale` and `numberingSystem`\n    // are the default values and `numberFormatOptions` has not been set\n    (!this._numberFormatOptions &&\n      options.locale === defaultLocale &&\n      options.numberingSystem === defaultNumberingSystem &&\n      // don't skip initialization if any options besides locale/numberingSystem are set\n      Object.keys(options).length === 2) ||\n      // cache formatter by only recreating when options change\n      JSON.stringify(this._numberFormatOptions) === JSON.stringify(options)) {\n      return;\n    }\n    this._numberFormatOptions = options;\n    this._numberFormatter = new Intl.NumberFormat(this._numberFormatOptions.locale, this._numberFormatOptions);\n    this._digits = [\n      ...new Intl.NumberFormat(this._numberFormatOptions.locale, {\n        useGrouping: false,\n        numberingSystem: this._numberFormatOptions.numberingSystem\n      }).format(9876543210)\n    ].reverse();\n    const index = new Map(this._digits.map((d, i) => [d, i]));\n    const parts = new Intl.NumberFormat(this._numberFormatOptions.locale).formatToParts(-12345678.9);\n    this._actualGroup = parts.find((d) => d.type === \"group\").value;\n    // change whitespace group characters that don't render correctly\n    this._group = this._actualGroup.trim().length === 0 ? \" \" : this._actualGroup;\n    this._decimal = parts.find((d) => d.type === \"decimal\").value;\n    this._minusSign = parts.find((d) => d.type === \"minusSign\").value;\n    this._getDigitIndex = (d) => index.get(d);\n  }\n}\nconst numberStringFormatter = new NumberStringFormat();\n\nexport { defaultNumberingSystem as a, getSupportedNumberingSystem as b, connectLocalized as c, disconnectLocalized as d, getSupportedLocale as g, isValidNumber as i, numberStringFormatter as n, parseNumberString as p, sanitizeNumberString as s };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}