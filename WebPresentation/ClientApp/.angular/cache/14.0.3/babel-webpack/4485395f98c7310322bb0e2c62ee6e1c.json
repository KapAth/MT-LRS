{"ast":null,"code":"/*!\n* tabbable 6.1.1\n* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE\n*/\n// NOTE: separate `:not()` selectors has broader browser support than the newer\n//  `:not([inert], [inert] *)` (Feb 2023)\n// CAREFUL: JSDom does not support `:not([inert] *)` as a selector; using it causes\n//  the entire query to fail, resulting in no nodes found, which will break a lot\n//  of things... so we have to rely on JS to identify nodes inside an inert container\nvar candidateSelectors = ['input:not([inert])', 'select:not([inert])', 'textarea:not([inert])', 'a[href]:not([inert])', 'button:not([inert])', '[tabindex]:not(slot):not([inert])', 'audio[controls]:not([inert])', 'video[controls]:not([inert])', '[contenteditable]:not([contenteditable=\"false\"]):not([inert])', 'details>summary:first-of-type:not([inert])', 'details:not([inert])'];\nvar candidateSelector = /* #__PURE__ */candidateSelectors.join(',');\nvar NoElement = typeof Element === 'undefined';\nvar matches = NoElement ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\nvar getRootNode = !NoElement && Element.prototype.getRootNode ? function (element) {\n  var _element$getRootNode;\n\n  return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);\n} : function (element) {\n  return element === null || element === void 0 ? void 0 : element.ownerDocument;\n};\n/**\n * Determines if a node is inert or in an inert ancestor.\n * @param {Element} [node]\n * @param {boolean} [lookUp] If true and `node` is not inert, looks up at ancestors to\n *  see if any of them are inert. If false, only `node` itself is considered.\n * @returns {boolean} True if inert itself or by way of being in an inert ancestor.\n *  False if `node` is falsy.\n */\n\nvar isInert = function isInert(node, lookUp) {\n  var _node$getAttribute;\n\n  if (lookUp === void 0) {\n    lookUp = true;\n  } // CAREFUL: JSDom does not support inert at all, so we can't use the `HTMLElement.inert`\n  //  JS API property; we have to check the attribute, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's an active element\n\n\n  var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, 'inert');\n  var inert = inertAtt === '' || inertAtt === 'true'; // NOTE: this could also be handled with `node.matches('[inert], :is([inert] *)')`\n  //  if it weren't for `matches()` not being a function on shadow roots; the following\n  //  code works for any kind of node\n  // CAREFUL: JSDom does not appear to support certain selectors like `:not([inert] *)`\n  //  so it likely would not support `:is([inert] *)` either...\n\n  var result = inert || lookUp && node && isInert(node.parentNode); // recursive\n\n  return result;\n};\n/**\n * Determines if a node's content is editable.\n * @param {Element} [node]\n * @returns True if it's content-editable; false if it's not or `node` is falsy.\n */\n\n\nvar isContentEditable = function isContentEditable(node) {\n  var _node$getAttribute2; // CAREFUL: JSDom does not support the `HTMLElement.isContentEditable` API so we have\n  //  to use the attribute directly to check for this, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's a non-editable element\n\n\n  var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, 'contenteditable');\n  return attValue === '' || attValue === 'true';\n};\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */\n\n\nvar getCandidates = function getCandidates(el, includeContainer, filter) {\n  // even if `includeContainer=false`, we still have to check it for inertness because\n  //  if it's inert, all its children are inert\n  if (isInert(el)) {\n    return [];\n  }\n\n  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));\n\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n\n  candidates = candidates.filter(filter);\n  return candidates;\n};\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */\n\n/**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */\n\n/**\n * @typedef {Object} CandidateScope\n * @property {Element} scopeParent contains inner candidates\n * @property {Element[]} candidates list of candidates found in the scope parent\n */\n\n/**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidateScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */\n\n/**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidateScope>}\n */\n\n\nvar getCandidatesIteratively = function getCandidatesIteratively(elements, includeContainer, options) {\n  var candidates = [];\n  var elementsToCheck = Array.from(elements);\n\n  while (elementsToCheck.length) {\n    var element = elementsToCheck.shift();\n\n    if (isInert(element, false)) {\n      // no need to look up since we're drilling down\n      // anything inside this container will also be inert\n      continue;\n    }\n\n    if (element.tagName === 'SLOT') {\n      // add shadow dom slot scope (slot itself cannot be focusable)\n      var assigned = element.assignedElements();\n      var content = assigned.length ? assigned : element.children;\n      var nestedCandidates = getCandidatesIteratively(content, true, options);\n\n      if (options.flatten) {\n        candidates.push.apply(candidates, nestedCandidates);\n      } else {\n        candidates.push({\n          scopeParent: element,\n          candidates: nestedCandidates\n        });\n      }\n    } else {\n      // check candidate element\n      var validCandidate = matches.call(element, candidateSelector);\n\n      if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {\n        candidates.push(element);\n      } // iterate over shadow content if possible\n\n\n      var shadowRoot = element.shadowRoot || // check for an undisclosed shadow\n      typeof options.getShadowRoot === 'function' && options.getShadowRoot(element); // no inert look up because we're already drilling down and checking for inertness\n      //  on the way down, so all containers to this root node should have already been\n      //  vetted as non-inert\n\n      var validShadowRoot = !isInert(shadowRoot, false) && (!options.shadowRootFilter || options.shadowRootFilter(element));\n\n      if (shadowRoot && validShadowRoot) {\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n        //  child candidates found because they're likely slotted elements (elements that are\n        //  children of the web component element (which has the shadow), in the light dom, but\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n        //  _after_ we return from this recursive call\n        var _nestedCandidates = getCandidatesIteratively(shadowRoot === true ? element.children : shadowRoot.children, true, options);\n\n        if (options.flatten) {\n          candidates.push.apply(candidates, _nestedCandidates);\n        } else {\n          candidates.push({\n            scopeParent: element,\n            candidates: _nestedCandidates\n          });\n        }\n      } else {\n        // there's not shadow so just dig into the element's (light dom) children\n        //  __without__ giving the element special scope treatment\n        elementsToCheck.unshift.apply(elementsToCheck, element.children);\n      }\n    }\n  }\n\n  return candidates;\n};\n\nvar getTabindex = function getTabindex(node, isScope) {\n  if (node.tabIndex < 0) {\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n    // yet they are still part of the regular tab order; in FF, they get a default\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n    // order, consider their tab index to be 0.\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\n    //\n    // isScope is positive for custom element with shadow root or slot that by default\n    // have tabIndex -1, but need to be sorted by document order in order for their\n    // content to be inserted in the correct position\n    if ((isScope || /^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && isNaN(parseInt(node.getAttribute('tabindex'), 10))) {\n      return 0;\n    }\n  }\n\n  return node.tabIndex;\n};\n\nvar sortOrderedTabbables = function sortOrderedTabbables(a, b) {\n  return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;\n};\n\nvar isInput = function isInput(node) {\n  return node.tagName === 'INPUT';\n};\n\nvar isHiddenInput = function isHiddenInput(node) {\n  return isInput(node) && node.type === 'hidden';\n};\n\nvar isDetailsWithSummary = function isDetailsWithSummary(node) {\n  var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {\n    return child.tagName === 'SUMMARY';\n  });\n  return r;\n};\n\nvar getCheckedRadio = function getCheckedRadio(nodes, form) {\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n};\n\nvar isTabbableRadio = function isTabbableRadio(node) {\n  if (!node.name) {\n    return true;\n  }\n\n  var radioScope = node.form || getRootNode(node);\n\n  var queryRadios = function queryRadios(name) {\n    return radioScope.querySelectorAll('input[type=\"radio\"][name=\"' + name + '\"]');\n  };\n\n  var radioSet;\n\n  if (typeof window !== 'undefined' && typeof window.CSS !== 'undefined' && typeof window.CSS.escape === 'function') {\n    radioSet = queryRadios(window.CSS.escape(node.name));\n  } else {\n    try {\n      radioSet = queryRadios(node.name);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s', err.message);\n      return false;\n    }\n  }\n\n  var checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n};\n\nvar isRadio = function isRadio(node) {\n  return isInput(node) && node.type === 'radio';\n};\n\nvar isNonTabbableRadio = function isNonTabbableRadio(node) {\n  return isRadio(node) && !isTabbableRadio(node);\n}; // determines if a node is ultimately attached to the window's document\n\n\nvar isNodeAttached = function isNodeAttached(node) {\n  var _nodeRoot; // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n  //  (but NOT _the_ document; see second 'If' comment below for more).\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n  //  is attached, and the one we need to check if it's in the document or not (because the\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n  //  visibility, including all the nodes it contains). The host could be any normal node,\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n  //  tested).\n  // To further complicate things, we have to look all the way up until we find a shadow HOST\n  //  that is attached (or find none) because the node might be in nested shadows...\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n  //  document (per the docs) and while it's a Document-type object, that document does not\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n  //  node is actually detached.\n  // NOTE: If `nodeRootHost` or `node` happens to be the `document` itself (which is possible\n  //  if a tabbable/focusable node was quickly added to the DOM, focused, and then removed\n  //  from the DOM as in https://github.com/focus-trap/focus-trap-react/issues/905), then\n  //  `ownerDocument` will be `null`, hence the optional chaining on it.\n\n\n  var nodeRoot = node && getRootNode(node);\n  var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host; // in some cases, a detached node will return itself as the root instead of a document or\n  //  shadow root object, in which case, we shouldn't try to look further up the host chain\n\n  var attached = false;\n\n  if (nodeRoot && nodeRoot !== node) {\n    var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;\n\n    attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));\n\n    while (!attached && nodeRootHost) {\n      var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD; // since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,\n      //  which means we need to get the host's host and check if that parent host is contained\n      //  in (i.e. attached to) the document\n\n\n      nodeRoot = getRootNode(nodeRootHost);\n      nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;\n      attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));\n    }\n  }\n\n  return attached;\n};\n\nvar isZeroArea = function isZeroArea(node) {\n  var _node$getBoundingClie = node.getBoundingClientRect(),\n      width = _node$getBoundingClie.width,\n      height = _node$getBoundingClie.height;\n\n  return width === 0 && height === 0;\n};\n\nvar isHidden = function isHidden(node, _ref) {\n  var displayCheck = _ref.displayCheck,\n      getShadowRoot = _ref.getShadowRoot; // NOTE: visibility will be `undefined` if node is detached from the document\n  //  (see notes about this further down), which means we will consider it visible\n  //  (this is legacy behavior from a very long way back)\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n  //  _visibility_ check, not a _display_ check\n\n  if (getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n\n  var isDirectSummary = matches.call(node, 'details>summary:first-of-type');\n  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\n    return true;\n  }\n\n  if (!displayCheck || displayCheck === 'full' || displayCheck === 'legacy-full') {\n    if (typeof getShadowRoot === 'function') {\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\n      //  'non-zero-area' fallback\n      var originalNode = node;\n\n      while (node) {\n        var parentElement = node.parentElement;\n        var rootNode = getRootNode(node);\n\n        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n        ) {\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\n          //  fall back to a non-zero-area test\n          return isZeroArea(node);\n        } else if (node.assignedSlot) {\n          // iterate up slot\n          node = node.assignedSlot;\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\n          // cross shadow boundary\n          node = rootNode.host;\n        } else {\n          // iterate up normal dom\n          node = parentElement;\n        }\n      }\n\n      node = originalNode;\n    } // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n    //  it might be a falsy value, which means shadow DOM support is disabled\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n    //  now we can just test to see if it would normally be visible or not, provided it's\n    //  attached to the main document.\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n\n\n    if (isNodeAttached(node)) {\n      // this works wherever the node is: if there's at least one client rect, it's\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\n      //  node itself is hidden in place of its contents; and there's no need to search\n      //  up the hierarchy either\n      return !node.getClientRects().length;\n    } // Else, the node isn't attached to the document, which means the `getClientRects()`\n    //  API will __always__ return zero rects (this can happen, for example, if React\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n    //\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\n    //  because styles are only computed for nodes that are in the document.\n    //\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n    //  considering __everything__ to be visible because of the innability to determine styles.\n    //\n    // v6.0.0: As of this major release, the default 'full' option __no longer treats detached\n    //  nodes as visible with the 'none' fallback.__\n\n\n    if (displayCheck !== 'legacy-full') {\n      return true; // hidden\n    } // else, fallback to 'none' mode and consider the node visible\n\n  } else if (displayCheck === 'non-zero-area') {\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\n    //  client rect, we don't special-case for whether the node is attached or not. In\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n    //  times, and that includes attached or not.\n    return isZeroArea(node);\n  } // visible, as far as we can tell, or per current `displayCheck=none` mode, we assume\n  //  it's visible\n\n\n  return false;\n}; // form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\n\n\nvar isDisabledFromFieldset = function isDisabledFromFieldset(node) {\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n    var parentNode = node.parentElement; // check if `node` is contained in a disabled <fieldset>\n\n    while (parentNode) {\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\n        // look for the first <legend> among the children of the disabled <fieldset>\n        for (var i = 0; i < parentNode.children.length; i++) {\n          var child = parentNode.children.item(i); // when the first <legend> (in document order) is found\n\n          if (child.tagName === 'LEGEND') {\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\n            // return whether `node` is a descendant of its first <legend>\n            return matches.call(parentNode, 'fieldset[disabled] *') ? true : !child.contains(node);\n          }\n        } // the disabled <fieldset> containing `node` has no <legend>\n\n\n        return true;\n      }\n\n      parentNode = parentNode.parentElement;\n    }\n  } // else, node's tabbable/focusable state should not be affected by a fieldset's\n  //  enabled/disabled state\n\n\n  return false;\n};\n\nvar isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {\n  if (node.disabled || // we must do an inert look up to filter out any elements inside an inert ancestor\n  //  because we're limited in the type of selectors we can use in JSDom (see related\n  //  note related to `candidateSelectors`)\n  isInert(node) || isHiddenInput(node) || isHidden(node, options) || // For a details element with a summary, the summary element gets the focus\n  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {\n    return false;\n  }\n\n  return true;\n};\n\nvar isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable(options, node) {\n  if (isNonTabbableRadio(node) || getTabindex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {\n    return false;\n  }\n\n  return true;\n};\n\nvar isValidShadowRootTabbable = function isValidShadowRootTabbable(shadowHostNode) {\n  var tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\n\n  if (isNaN(tabIndex) || tabIndex >= 0) {\n    return true;\n  } // If a custom element has an explicit negative tabindex,\n  // browsers will not allow tab targeting said element's children.\n\n\n  return false;\n};\n/**\n * @param {Array.<Element|CandidateScope>} candidates\n * @returns Element[]\n */\n\n\nvar sortByOrder = function sortByOrder(candidates) {\n  var regularTabbables = [];\n  var orderedTabbables = [];\n  candidates.forEach(function (item, i) {\n    var isScope = !!item.scopeParent;\n    var element = isScope ? item.scopeParent : item;\n    var candidateTabindex = getTabindex(element, isScope);\n    var elements = isScope ? sortByOrder(item.candidates) : element;\n\n    if (candidateTabindex === 0) {\n      isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        item: item,\n        isScope: isScope,\n        content: elements\n      });\n    }\n  });\n  return orderedTabbables.sort(sortOrderedTabbables).reduce(function (acc, sortable) {\n    sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);\n    return acc;\n  }, []).concat(regularTabbables);\n};\n\nvar tabbable = function tabbable(el, options) {\n  options = options || {};\n  var candidates;\n\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorTabbable.bind(null, options),\n      flatten: false,\n      getShadowRoot: options.getShadowRoot,\n      shadowRootFilter: isValidShadowRootTabbable\n    });\n  } else {\n    candidates = getCandidates(el, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));\n  }\n\n  return sortByOrder(candidates);\n};\n\nvar focusable = function focusable(el, options) {\n  options = options || {};\n  var candidates;\n\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorFocusable.bind(null, options),\n      flatten: true,\n      getShadowRoot: options.getShadowRoot\n    });\n  } else {\n    candidates = getCandidates(el, options.includeContainer, isNodeMatchingSelectorFocusable.bind(null, options));\n  }\n\n  return candidates;\n};\n\nvar isTabbable = function isTabbable(node, options) {\n  options = options || {};\n\n  if (!node) {\n    throw new Error('No node provided');\n  }\n\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n\n  return isNodeMatchingSelectorTabbable(options, node);\n};\n\nvar focusableCandidateSelector = /* #__PURE__ */candidateSelectors.concat('iframe').join(',');\n\nvar isFocusable = function isFocusable(node, options) {\n  options = options || {};\n\n  if (!node) {\n    throw new Error('No node provided');\n  }\n\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n\n  return isNodeMatchingSelectorFocusable(options, node);\n};\n\nexport { focusable, isFocusable, isTabbable, tabbable };","map":{"version":3,"names":["candidateSelectors","candidateSelector","join","NoElement","Element","matches","prototype","msMatchesSelector","webkitMatchesSelector","getRootNode","element","_element$getRootNode","call","ownerDocument","isInert","node","lookUp","_node$getAttribute","inertAtt","getAttribute","inert","result","parentNode","isContentEditable","_node$getAttribute2","attValue","getCandidates","el","includeContainer","filter","candidates","Array","slice","apply","querySelectorAll","unshift","getCandidatesIteratively","elements","options","elementsToCheck","from","length","shift","tagName","assigned","assignedElements","content","children","nestedCandidates","flatten","push","scopeParent","validCandidate","includes","shadowRoot","getShadowRoot","validShadowRoot","shadowRootFilter","_nestedCandidates","getTabindex","isScope","tabIndex","test","isNaN","parseInt","sortOrderedTabbables","a","b","documentOrder","isInput","isHiddenInput","type","isDetailsWithSummary","r","some","child","getCheckedRadio","nodes","form","i","checked","isTabbableRadio","name","radioScope","queryRadios","radioSet","window","CSS","escape","err","console","error","message","isRadio","isNonTabbableRadio","isNodeAttached","_nodeRoot","nodeRoot","nodeRootHost","host","attached","_nodeRootHost","_nodeRootHost$ownerDo","_node$ownerDocument","contains","_nodeRoot2","_nodeRootHost2","_nodeRootHost2$ownerD","isZeroArea","_node$getBoundingClie","getBoundingClientRect","width","height","isHidden","_ref","displayCheck","getComputedStyle","visibility","isDirectSummary","nodeUnderDetails","parentElement","originalNode","rootNode","assignedSlot","getClientRects","isDisabledFromFieldset","disabled","item","isNodeMatchingSelectorFocusable","isNodeMatchingSelectorTabbable","isValidShadowRootTabbable","shadowHostNode","sortByOrder","regularTabbables","orderedTabbables","forEach","candidateTabindex","sort","reduce","acc","sortable","concat","tabbable","bind","focusable","isTabbable","Error","focusableCandidateSelector","isFocusable"],"sources":["C:/Users/akaps/Documents/Visual Studio 2022/Projects/MT_LRS/WebPresentation/node_modules/tabbable/dist/index.esm.js"],"sourcesContent":["/*!\n* tabbable 6.1.1\n* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE\n*/\n// NOTE: separate `:not()` selectors has broader browser support than the newer\n//  `:not([inert], [inert] *)` (Feb 2023)\n// CAREFUL: JSDom does not support `:not([inert] *)` as a selector; using it causes\n//  the entire query to fail, resulting in no nodes found, which will break a lot\n//  of things... so we have to rely on JS to identify nodes inside an inert container\nvar candidateSelectors = ['input:not([inert])', 'select:not([inert])', 'textarea:not([inert])', 'a[href]:not([inert])', 'button:not([inert])', '[tabindex]:not(slot):not([inert])', 'audio[controls]:not([inert])', 'video[controls]:not([inert])', '[contenteditable]:not([contenteditable=\"false\"]):not([inert])', 'details>summary:first-of-type:not([inert])', 'details:not([inert])'];\nvar candidateSelector = /* #__PURE__ */candidateSelectors.join(',');\nvar NoElement = typeof Element === 'undefined';\nvar matches = NoElement ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\nvar getRootNode = !NoElement && Element.prototype.getRootNode ? function (element) {\n  var _element$getRootNode;\n  return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);\n} : function (element) {\n  return element === null || element === void 0 ? void 0 : element.ownerDocument;\n};\n\n/**\n * Determines if a node is inert or in an inert ancestor.\n * @param {Element} [node]\n * @param {boolean} [lookUp] If true and `node` is not inert, looks up at ancestors to\n *  see if any of them are inert. If false, only `node` itself is considered.\n * @returns {boolean} True if inert itself or by way of being in an inert ancestor.\n *  False if `node` is falsy.\n */\nvar isInert = function isInert(node, lookUp) {\n  var _node$getAttribute;\n  if (lookUp === void 0) {\n    lookUp = true;\n  }\n  // CAREFUL: JSDom does not support inert at all, so we can't use the `HTMLElement.inert`\n  //  JS API property; we have to check the attribute, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's an active element\n  var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, 'inert');\n  var inert = inertAtt === '' || inertAtt === 'true';\n\n  // NOTE: this could also be handled with `node.matches('[inert], :is([inert] *)')`\n  //  if it weren't for `matches()` not being a function on shadow roots; the following\n  //  code works for any kind of node\n  // CAREFUL: JSDom does not appear to support certain selectors like `:not([inert] *)`\n  //  so it likely would not support `:is([inert] *)` either...\n  var result = inert || lookUp && node && isInert(node.parentNode); // recursive\n\n  return result;\n};\n\n/**\n * Determines if a node's content is editable.\n * @param {Element} [node]\n * @returns True if it's content-editable; false if it's not or `node` is falsy.\n */\nvar isContentEditable = function isContentEditable(node) {\n  var _node$getAttribute2;\n  // CAREFUL: JSDom does not support the `HTMLElement.isContentEditable` API so we have\n  //  to use the attribute directly to check for this, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's a non-editable element\n  var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, 'contenteditable');\n  return attValue === '' || attValue === 'true';\n};\n\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */\nvar getCandidates = function getCandidates(el, includeContainer, filter) {\n  // even if `includeContainer=false`, we still have to check it for inertness because\n  //  if it's inert, all its children are inert\n  if (isInert(el)) {\n    return [];\n  }\n  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n  candidates = candidates.filter(filter);\n  return candidates;\n};\n\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */\n\n/**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */\n\n/**\n * @typedef {Object} CandidateScope\n * @property {Element} scopeParent contains inner candidates\n * @property {Element[]} candidates list of candidates found in the scope parent\n */\n\n/**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidateScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */\n\n/**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidateScope>}\n */\nvar getCandidatesIteratively = function getCandidatesIteratively(elements, includeContainer, options) {\n  var candidates = [];\n  var elementsToCheck = Array.from(elements);\n  while (elementsToCheck.length) {\n    var element = elementsToCheck.shift();\n    if (isInert(element, false)) {\n      // no need to look up since we're drilling down\n      // anything inside this container will also be inert\n      continue;\n    }\n    if (element.tagName === 'SLOT') {\n      // add shadow dom slot scope (slot itself cannot be focusable)\n      var assigned = element.assignedElements();\n      var content = assigned.length ? assigned : element.children;\n      var nestedCandidates = getCandidatesIteratively(content, true, options);\n      if (options.flatten) {\n        candidates.push.apply(candidates, nestedCandidates);\n      } else {\n        candidates.push({\n          scopeParent: element,\n          candidates: nestedCandidates\n        });\n      }\n    } else {\n      // check candidate element\n      var validCandidate = matches.call(element, candidateSelector);\n      if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {\n        candidates.push(element);\n      }\n\n      // iterate over shadow content if possible\n      var shadowRoot = element.shadowRoot ||\n      // check for an undisclosed shadow\n      typeof options.getShadowRoot === 'function' && options.getShadowRoot(element);\n\n      // no inert look up because we're already drilling down and checking for inertness\n      //  on the way down, so all containers to this root node should have already been\n      //  vetted as non-inert\n      var validShadowRoot = !isInert(shadowRoot, false) && (!options.shadowRootFilter || options.shadowRootFilter(element));\n      if (shadowRoot && validShadowRoot) {\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n        //  child candidates found because they're likely slotted elements (elements that are\n        //  children of the web component element (which has the shadow), in the light dom, but\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n        //  _after_ we return from this recursive call\n        var _nestedCandidates = getCandidatesIteratively(shadowRoot === true ? element.children : shadowRoot.children, true, options);\n        if (options.flatten) {\n          candidates.push.apply(candidates, _nestedCandidates);\n        } else {\n          candidates.push({\n            scopeParent: element,\n            candidates: _nestedCandidates\n          });\n        }\n      } else {\n        // there's not shadow so just dig into the element's (light dom) children\n        //  __without__ giving the element special scope treatment\n        elementsToCheck.unshift.apply(elementsToCheck, element.children);\n      }\n    }\n  }\n  return candidates;\n};\nvar getTabindex = function getTabindex(node, isScope) {\n  if (node.tabIndex < 0) {\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n    // yet they are still part of the regular tab order; in FF, they get a default\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n    // order, consider their tab index to be 0.\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\n    //\n    // isScope is positive for custom element with shadow root or slot that by default\n    // have tabIndex -1, but need to be sorted by document order in order for their\n    // content to be inserted in the correct position\n    if ((isScope || /^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && isNaN(parseInt(node.getAttribute('tabindex'), 10))) {\n      return 0;\n    }\n  }\n  return node.tabIndex;\n};\nvar sortOrderedTabbables = function sortOrderedTabbables(a, b) {\n  return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;\n};\nvar isInput = function isInput(node) {\n  return node.tagName === 'INPUT';\n};\nvar isHiddenInput = function isHiddenInput(node) {\n  return isInput(node) && node.type === 'hidden';\n};\nvar isDetailsWithSummary = function isDetailsWithSummary(node) {\n  var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {\n    return child.tagName === 'SUMMARY';\n  });\n  return r;\n};\nvar getCheckedRadio = function getCheckedRadio(nodes, form) {\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n};\nvar isTabbableRadio = function isTabbableRadio(node) {\n  if (!node.name) {\n    return true;\n  }\n  var radioScope = node.form || getRootNode(node);\n  var queryRadios = function queryRadios(name) {\n    return radioScope.querySelectorAll('input[type=\"radio\"][name=\"' + name + '\"]');\n  };\n  var radioSet;\n  if (typeof window !== 'undefined' && typeof window.CSS !== 'undefined' && typeof window.CSS.escape === 'function') {\n    radioSet = queryRadios(window.CSS.escape(node.name));\n  } else {\n    try {\n      radioSet = queryRadios(node.name);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s', err.message);\n      return false;\n    }\n  }\n  var checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n};\nvar isRadio = function isRadio(node) {\n  return isInput(node) && node.type === 'radio';\n};\nvar isNonTabbableRadio = function isNonTabbableRadio(node) {\n  return isRadio(node) && !isTabbableRadio(node);\n};\n\n// determines if a node is ultimately attached to the window's document\nvar isNodeAttached = function isNodeAttached(node) {\n  var _nodeRoot;\n  // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n  //  (but NOT _the_ document; see second 'If' comment below for more).\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n  //  is attached, and the one we need to check if it's in the document or not (because the\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n  //  visibility, including all the nodes it contains). The host could be any normal node,\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n  //  tested).\n  // To further complicate things, we have to look all the way up until we find a shadow HOST\n  //  that is attached (or find none) because the node might be in nested shadows...\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n  //  document (per the docs) and while it's a Document-type object, that document does not\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n  //  node is actually detached.\n  // NOTE: If `nodeRootHost` or `node` happens to be the `document` itself (which is possible\n  //  if a tabbable/focusable node was quickly added to the DOM, focused, and then removed\n  //  from the DOM as in https://github.com/focus-trap/focus-trap-react/issues/905), then\n  //  `ownerDocument` will be `null`, hence the optional chaining on it.\n  var nodeRoot = node && getRootNode(node);\n  var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host;\n\n  // in some cases, a detached node will return itself as the root instead of a document or\n  //  shadow root object, in which case, we shouldn't try to look further up the host chain\n  var attached = false;\n  if (nodeRoot && nodeRoot !== node) {\n    var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;\n    attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));\n    while (!attached && nodeRootHost) {\n      var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD;\n      // since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,\n      //  which means we need to get the host's host and check if that parent host is contained\n      //  in (i.e. attached to) the document\n      nodeRoot = getRootNode(nodeRootHost);\n      nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;\n      attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));\n    }\n  }\n  return attached;\n};\nvar isZeroArea = function isZeroArea(node) {\n  var _node$getBoundingClie = node.getBoundingClientRect(),\n    width = _node$getBoundingClie.width,\n    height = _node$getBoundingClie.height;\n  return width === 0 && height === 0;\n};\nvar isHidden = function isHidden(node, _ref) {\n  var displayCheck = _ref.displayCheck,\n    getShadowRoot = _ref.getShadowRoot;\n  // NOTE: visibility will be `undefined` if node is detached from the document\n  //  (see notes about this further down), which means we will consider it visible\n  //  (this is legacy behavior from a very long way back)\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n  //  _visibility_ check, not a _display_ check\n  if (getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n  var isDirectSummary = matches.call(node, 'details>summary:first-of-type');\n  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\n    return true;\n  }\n  if (!displayCheck || displayCheck === 'full' || displayCheck === 'legacy-full') {\n    if (typeof getShadowRoot === 'function') {\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\n      //  'non-zero-area' fallback\n      var originalNode = node;\n      while (node) {\n        var parentElement = node.parentElement;\n        var rootNode = getRootNode(node);\n        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n        ) {\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\n          //  fall back to a non-zero-area test\n          return isZeroArea(node);\n        } else if (node.assignedSlot) {\n          // iterate up slot\n          node = node.assignedSlot;\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\n          // cross shadow boundary\n          node = rootNode.host;\n        } else {\n          // iterate up normal dom\n          node = parentElement;\n        }\n      }\n      node = originalNode;\n    }\n    // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n    //  it might be a falsy value, which means shadow DOM support is disabled\n\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n    //  now we can just test to see if it would normally be visible or not, provided it's\n    //  attached to the main document.\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n\n    if (isNodeAttached(node)) {\n      // this works wherever the node is: if there's at least one client rect, it's\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\n      //  node itself is hidden in place of its contents; and there's no need to search\n      //  up the hierarchy either\n      return !node.getClientRects().length;\n    }\n\n    // Else, the node isn't attached to the document, which means the `getClientRects()`\n    //  API will __always__ return zero rects (this can happen, for example, if React\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n    //\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\n    //  because styles are only computed for nodes that are in the document.\n    //\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n    //  considering __everything__ to be visible because of the innability to determine styles.\n    //\n    // v6.0.0: As of this major release, the default 'full' option __no longer treats detached\n    //  nodes as visible with the 'none' fallback.__\n    if (displayCheck !== 'legacy-full') {\n      return true; // hidden\n    }\n    // else, fallback to 'none' mode and consider the node visible\n  } else if (displayCheck === 'non-zero-area') {\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\n    //  client rect, we don't special-case for whether the node is attached or not. In\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n    //  times, and that includes attached or not.\n    return isZeroArea(node);\n  }\n\n  // visible, as far as we can tell, or per current `displayCheck=none` mode, we assume\n  //  it's visible\n  return false;\n};\n\n// form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\nvar isDisabledFromFieldset = function isDisabledFromFieldset(node) {\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n    var parentNode = node.parentElement;\n    // check if `node` is contained in a disabled <fieldset>\n    while (parentNode) {\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\n        // look for the first <legend> among the children of the disabled <fieldset>\n        for (var i = 0; i < parentNode.children.length; i++) {\n          var child = parentNode.children.item(i);\n          // when the first <legend> (in document order) is found\n          if (child.tagName === 'LEGEND') {\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\n            // return whether `node` is a descendant of its first <legend>\n            return matches.call(parentNode, 'fieldset[disabled] *') ? true : !child.contains(node);\n          }\n        }\n        // the disabled <fieldset> containing `node` has no <legend>\n        return true;\n      }\n      parentNode = parentNode.parentElement;\n    }\n  }\n\n  // else, node's tabbable/focusable state should not be affected by a fieldset's\n  //  enabled/disabled state\n  return false;\n};\nvar isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {\n  if (node.disabled ||\n  // we must do an inert look up to filter out any elements inside an inert ancestor\n  //  because we're limited in the type of selectors we can use in JSDom (see related\n  //  note related to `candidateSelectors`)\n  isInert(node) || isHiddenInput(node) || isHidden(node, options) ||\n  // For a details element with a summary, the summary element gets the focus\n  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {\n    return false;\n  }\n  return true;\n};\nvar isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable(options, node) {\n  if (isNonTabbableRadio(node) || getTabindex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {\n    return false;\n  }\n  return true;\n};\nvar isValidShadowRootTabbable = function isValidShadowRootTabbable(shadowHostNode) {\n  var tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\n  if (isNaN(tabIndex) || tabIndex >= 0) {\n    return true;\n  }\n  // If a custom element has an explicit negative tabindex,\n  // browsers will not allow tab targeting said element's children.\n  return false;\n};\n\n/**\n * @param {Array.<Element|CandidateScope>} candidates\n * @returns Element[]\n */\nvar sortByOrder = function sortByOrder(candidates) {\n  var regularTabbables = [];\n  var orderedTabbables = [];\n  candidates.forEach(function (item, i) {\n    var isScope = !!item.scopeParent;\n    var element = isScope ? item.scopeParent : item;\n    var candidateTabindex = getTabindex(element, isScope);\n    var elements = isScope ? sortByOrder(item.candidates) : element;\n    if (candidateTabindex === 0) {\n      isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        item: item,\n        isScope: isScope,\n        content: elements\n      });\n    }\n  });\n  return orderedTabbables.sort(sortOrderedTabbables).reduce(function (acc, sortable) {\n    sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);\n    return acc;\n  }, []).concat(regularTabbables);\n};\nvar tabbable = function tabbable(el, options) {\n  options = options || {};\n  var candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorTabbable.bind(null, options),\n      flatten: false,\n      getShadowRoot: options.getShadowRoot,\n      shadowRootFilter: isValidShadowRootTabbable\n    });\n  } else {\n    candidates = getCandidates(el, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));\n  }\n  return sortByOrder(candidates);\n};\nvar focusable = function focusable(el, options) {\n  options = options || {};\n  var candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorFocusable.bind(null, options),\n      flatten: true,\n      getShadowRoot: options.getShadowRoot\n    });\n  } else {\n    candidates = getCandidates(el, options.includeContainer, isNodeMatchingSelectorFocusable.bind(null, options));\n  }\n  return candidates;\n};\nvar isTabbable = function isTabbable(node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorTabbable(options, node);\n};\nvar focusableCandidateSelector = /* #__PURE__ */candidateSelectors.concat('iframe').join(',');\nvar isFocusable = function isFocusable(node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorFocusable(options, node);\n};\n\nexport { focusable, isFocusable, isTabbable, tabbable };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}